<?php

/**
 * PublipostageApi
 * PHP version 5
 *
 * @category Class
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merci facteur API
 *
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MerciFacteurApi\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MerciFacteurApi\Client\ApiException;
use MerciFacteurApi\Client\Configuration;
use MerciFacteurApi\Client\HeaderSelector;
use MerciFacteurApi\Client\ObjectSerializer;

/**
 * PublipostageApi Class Doc Comment
 *
 * @category Class
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PublipostageApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sendPublipostage
     *
     * Envoi de la source de données du publipostage
     *
     * @param  int $id_envoi id_envoi (required)
     * @param  int $id_exp id_exp (required)
     * @param  string $json_exp json_exp (required)
     * @param  string $mode_envoi mode_envoi (required)
     * @param  \MerciFacteurApi\Client\Model\SendCourrierAnonymize $anonymize anonymize (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MerciFacteurApi\Client\Model\InlineResponse2009
     */
    public function sendPublipostage($id_envoi, $id_exp, $json_exp, $mode_envoi, $anonymize, $ww_service_id, $ww_access_token)
    {
        list($response) = $this->sendPublipostageWithHttpInfo($id_envoi, $id_exp, $json_exp, $mode_envoi, $anonymize, $ww_service_id, $ww_access_token);
        return $response;
    }

    /**
     * Operation sendPublipostageWithHttpInfo
     *
     * Envoi de la source de données du publipostage
     *
     * @param  int $id_envoi (required)
     * @param  int $id_exp (required)
     * @param  string $json_exp (required)
     * @param  string $mode_envoi (required)
     * @param  \MerciFacteurApi\Client\Model\SendCourrierAnonymize $anonymize (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MerciFacteurApi\Client\Model\InlineResponse2009, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendPublipostageWithHttpInfo($id_envoi, $id_exp, $json_exp, $mode_envoi, $anonymize, $ww_service_id, $ww_access_token)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse2009';
        $request = $this->sendPublipostageRequest($id_envoi, $id_exp, $json_exp, $mode_envoi, $anonymize, $ww_service_id, $ww_access_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse2009',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendPublipostageAsync
     *
     * Envoi de la source de données du publipostage
     *
     * @param  int $id_envoi (required)
     * @param  int $id_exp (required)
     * @param  string $json_exp (required)
     * @param  string $mode_envoi (required)
     * @param  \MerciFacteurApi\Client\Model\SendCourrierAnonymize $anonymize (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPublipostageAsync($id_envoi, $id_exp, $json_exp, $mode_envoi, $anonymize, $ww_service_id, $ww_access_token)
    {
        return $this->sendPublipostageAsyncWithHttpInfo($id_envoi, $id_exp, $json_exp, $mode_envoi, $anonymize, $ww_service_id, $ww_access_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendPublipostageAsyncWithHttpInfo
     *
     * Envoi de la source de données du publipostage
     *
     * @param  int $id_envoi (required)
     * @param  int $id_exp (required)
     * @param  string $json_exp (required)
     * @param  string $mode_envoi (required)
     * @param  \MerciFacteurApi\Client\Model\SendCourrierAnonymize $anonymize (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPublipostageAsyncWithHttpInfo($id_envoi, $id_exp, $json_exp, $mode_envoi, $anonymize, $ww_service_id, $ww_access_token)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse2009';
        $request = $this->sendPublipostageRequest($id_envoi, $id_exp, $json_exp, $mode_envoi, $anonymize, $ww_service_id, $ww_access_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendPublipostage'
     *
     * @param  int $id_envoi (required)
     * @param  int $id_exp (required)
     * @param  string $json_exp (required)
     * @param  string $mode_envoi (required)
     * @param  \MerciFacteurApi\Client\Model\SendCourrierAnonymize $anonymize (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendPublipostageRequest($id_envoi, $id_exp, $json_exp, $mode_envoi, $anonymize, $ww_service_id, $ww_access_token)
    {
        // verify the required parameter 'id_envoi' is set
        if ($id_envoi === null || (is_array($id_envoi) && count($id_envoi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_envoi when calling sendPublipostage'
            );
        }
        // verify the required parameter 'id_exp' is set
        if ($id_exp === null || (is_array($id_exp) && count($id_exp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_exp when calling sendPublipostage'
            );
        }
        // verify the required parameter 'json_exp' is set
        if ($json_exp === null || (is_array($json_exp) && count($json_exp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $json_exp when calling sendPublipostage'
            );
        }
        // verify the required parameter 'mode_envoi' is set
        if ($mode_envoi === null || (is_array($mode_envoi) && count($mode_envoi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mode_envoi when calling sendPublipostage'
            );
        }
        // verify the required parameter 'anonymize' is set
        if ($anonymize === null || (is_array($anonymize) && count($anonymize) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $anonymize when calling sendPublipostage'
            );
        }
        // verify the required parameter 'ww_service_id' is set
        if ($ww_service_id === null || (is_array($ww_service_id) && count($ww_service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_service_id when calling sendPublipostage'
            );
        }
        // verify the required parameter 'ww_access_token' is set
        if ($ww_access_token === null || (is_array($ww_access_token) && count($ww_access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_access_token when calling sendPublipostage'
            );
        }

        $resourcePath = '/sendPublipostage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($ww_service_id !== null) {
            $headerParams['ww-service-id'] = ObjectSerializer::toHeaderValue($ww_service_id);
        }
        // header params
        if ($ww_access_token !== null) {
            $headerParams['ww-access-token'] = ObjectSerializer::toHeaderValue($ww_access_token);
        }


        // form params
        if ($id_envoi !== null) {
            $formParams['idEnvoi'] = ObjectSerializer::toFormValue($id_envoi);
        }
        // form params
        if ($id_exp !== null) {
            $formParams['idExp'] = ObjectSerializer::toFormValue($id_exp);
        }
        // form params
        if ($json_exp !== null) {
            $formParams['jsonExp'] = ObjectSerializer::toFormValue($json_exp);
        }
        // form params
        if ($mode_envoi !== null) {
            $formParams['modeEnvoi'] = ObjectSerializer::toFormValue($mode_envoi);
        }
        // form params
        if ($anonymize !== null) {
            $formParams['anonymize'] = ObjectSerializer::toFormValue($anonymize);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sourcePublipostage
     *
     * Envoi de la source de données du publipostage
     *
     * @param  int $id_user id_user (required)
     * @param  object $template_validation template_validation (required)
     * @param  \MerciFacteurApi\Client\Model\SourcePublipostageSource $source source (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MerciFacteurApi\Client\Model\InlineResponse20014
     */
    public function sourcePublipostage($id_user, $template_validation, $source, $ww_service_id, $ww_access_token)
    {
        list($response) = $this->sourcePublipostageWithHttpInfo($id_user, $template_validation, $source, $ww_service_id, $ww_access_token);
        return $response;
    }

    /**
     * Operation sourcePublipostageWithHttpInfo
     *
     * Envoi de la source de données du publipostage
     *
     * @param  int $id_user (required)
     * @param  object $template_validation (required)
     * @param  \MerciFacteurApi\Client\Model\SourcePublipostageSource $source (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MerciFacteurApi\Client\Model\InlineResponse20014, HTTP status code, HTTP response headers (array of strings)
     */
    public function sourcePublipostageWithHttpInfo($id_user, $template_validation, $source, $ww_service_id, $ww_access_token)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse20014';
        $request = $this->sourcePublipostageRequest($id_user, $template_validation, $source, $ww_service_id, $ww_access_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse20014',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sourcePublipostageAsync
     *
     * Envoi de la source de données du publipostage
     *
     * @param  int $id_user (required)
     * @param  object $template_validation (required)
     * @param  \MerciFacteurApi\Client\Model\SourcePublipostageSource $source (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sourcePublipostageAsync($id_user, $template_validation, $source, $ww_service_id, $ww_access_token)
    {
        return $this->sourcePublipostageAsyncWithHttpInfo($id_user, $template_validation, $source, $ww_service_id, $ww_access_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sourcePublipostageAsyncWithHttpInfo
     *
     * Envoi de la source de données du publipostage
     *
     * @param  int $id_user (required)
     * @param  object $template_validation (required)
     * @param  \MerciFacteurApi\Client\Model\SourcePublipostageSource $source (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sourcePublipostageAsyncWithHttpInfo($id_user, $template_validation, $source, $ww_service_id, $ww_access_token)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse20014';
        $request = $this->sourcePublipostageRequest($id_user, $template_validation, $source, $ww_service_id, $ww_access_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sourcePublipostage'
     *
     * @param  int $id_user (required)
     * @param  object $template_validation (required)
     * @param  \MerciFacteurApi\Client\Model\SourcePublipostageSource $source (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sourcePublipostageRequest($id_user, $template_validation, $source, $ww_service_id, $ww_access_token)
    {
        // verify the required parameter 'id_user' is set
        if ($id_user === null || (is_array($id_user) && count($id_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_user when calling sourcePublipostage'
            );
        }
        // verify the required parameter 'template_validation' is set
        if ($template_validation === null || (is_array($template_validation) && count($template_validation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template_validation when calling sourcePublipostage'
            );
        }
        // verify the required parameter 'source' is set
        if ($source === null || (is_array($source) && count($source) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source when calling sourcePublipostage'
            );
        }
        // verify the required parameter 'ww_service_id' is set
        if ($ww_service_id === null || (is_array($ww_service_id) && count($ww_service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_service_id when calling sourcePublipostage'
            );
        }
        // verify the required parameter 'ww_access_token' is set
        if ($ww_access_token === null || (is_array($ww_access_token) && count($ww_access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_access_token when calling sourcePublipostage'
            );
        }

        $resourcePath = '/sourcePublipostage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($ww_service_id !== null) {
            $headerParams['ww-service-id'] = ObjectSerializer::toHeaderValue($ww_service_id);
        }
        // header params
        if ($ww_access_token !== null) {
            $headerParams['ww-access-token'] = ObjectSerializer::toHeaderValue($ww_access_token);
        }


        // form params
        if ($id_user !== null) {
            $formParams['idUser'] = ObjectSerializer::toFormValue($id_user);
        }
        // form params
        if ($template_validation !== null) {
            $formParams['templateValidation'] = ObjectSerializer::toFormValue($template_validation);
        }
        // form params
        if ($source !== null) {
            $formParams['source'] = ObjectSerializer::toFormValue($source);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templatePublipostage
     *
     * Envoi du template de la lettre à envoyer en nombre
     *
     * @param  string $type_template type_template (required)
     * @param  string $template template (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MerciFacteurApi\Client\Model\InlineResponse20013
     */
    public function templatePublipostage($type_template, $template, $ww_service_id, $ww_access_token)
    {
        list($response) = $this->templatePublipostageWithHttpInfo($type_template, $template, $ww_service_id, $ww_access_token);
        return $response;
    }

    /**
     * Operation templatePublipostageWithHttpInfo
     *
     * Envoi du template de la lettre à envoyer en nombre
     *
     * @param  string $type_template (required)
     * @param  string $template (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MerciFacteurApi\Client\Model\InlineResponse20013, HTTP status code, HTTP response headers (array of strings)
     */
    public function templatePublipostageWithHttpInfo($type_template, $template, $ww_service_id, $ww_access_token)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse20013';
        $request = $this->templatePublipostageRequest($type_template, $template, $ww_service_id, $ww_access_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse20013',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation templatePublipostageAsync
     *
     * Envoi du template de la lettre à envoyer en nombre
     *
     * @param  string $type_template (required)
     * @param  string $template (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatePublipostageAsync($type_template, $template, $ww_service_id, $ww_access_token)
    {
        return $this->templatePublipostageAsyncWithHttpInfo($type_template, $template, $ww_service_id, $ww_access_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templatePublipostageAsyncWithHttpInfo
     *
     * Envoi du template de la lettre à envoyer en nombre
     *
     * @param  string $type_template (required)
     * @param  string $template (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatePublipostageAsyncWithHttpInfo($type_template, $template, $ww_service_id, $ww_access_token)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse20013';
        $request = $this->templatePublipostageRequest($type_template, $template, $ww_service_id, $ww_access_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templatePublipostage'
     *
     * @param  string $type_template (required)
     * @param  string $template (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function templatePublipostageRequest($type_template, $template, $ww_service_id, $ww_access_token)
    {
        // verify the required parameter 'type_template' is set
        if ($type_template === null || (is_array($type_template) && count($type_template) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type_template when calling templatePublipostage'
            );
        }
        // verify the required parameter 'template' is set
        if ($template === null || (is_array($template) && count($template) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template when calling templatePublipostage'
            );
        }
        // verify the required parameter 'ww_service_id' is set
        if ($ww_service_id === null || (is_array($ww_service_id) && count($ww_service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_service_id when calling templatePublipostage'
            );
        }
        // verify the required parameter 'ww_access_token' is set
        if ($ww_access_token === null || (is_array($ww_access_token) && count($ww_access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_access_token when calling templatePublipostage'
            );
        }

        $resourcePath = '/templatePublipostage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($ww_service_id !== null) {
            $headerParams['ww-service-id'] = ObjectSerializer::toHeaderValue($ww_service_id);
        }
        // header params
        if ($ww_access_token !== null) {
            $headerParams['ww-access-token'] = ObjectSerializer::toHeaderValue($ww_access_token);
        }


        // form params
        if ($type_template !== null) {
            $formParams['typeTemplate'] = ObjectSerializer::toFormValue($type_template);
        }
        // form params
        if ($template !== null) {
            $formParams['template'] = ObjectSerializer::toFormValue($template);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

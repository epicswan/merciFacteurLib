<?php

/**
 * CourrierApi
 * PHP version 5
 *
 * @category Class
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merci facteur API
 *
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MerciFacteurApi\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MerciFacteurApi\Client\ApiException;
use MerciFacteurApi\Client\Configuration;
use MerciFacteurApi\Client\HeaderSelector;
use MerciFacteurApi\Client\ObjectSerializer;

/**
 * CourrierApi Class Doc Comment
 *
 * @category Class
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CourrierApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteEnvoi
     *
     * Annuler un envoi et son contenu
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_envoi Id de l&#x27;envoi contenant les courriers à annuler (Id retourné par /sendCourrier) (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MerciFacteurApi\Client\Model\InlineResponse2002
     */
    public function deleteEnvoi($ww_service_id, $ww_access_token, $id_envoi)
    {
        list($response) = $this->deleteEnvoiWithHttpInfo($ww_service_id, $ww_access_token, $id_envoi);
        return $response;
    }

    /**
     * Operation deleteEnvoiWithHttpInfo
     *
     * Annuler un envoi et son contenu
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_envoi Id de l&#x27;envoi contenant les courriers à annuler (Id retourné par /sendCourrier) (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MerciFacteurApi\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnvoiWithHttpInfo($ww_service_id, $ww_access_token, $id_envoi)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse2002';
        $request = $this->deleteEnvoiRequest($ww_service_id, $ww_access_token, $id_envoi);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnvoiAsync
     *
     * Annuler un envoi et son contenu
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_envoi Id de l&#x27;envoi contenant les courriers à annuler (Id retourné par /sendCourrier) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvoiAsync($ww_service_id, $ww_access_token, $id_envoi)
    {
        return $this->deleteEnvoiAsyncWithHttpInfo($ww_service_id, $ww_access_token, $id_envoi)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnvoiAsyncWithHttpInfo
     *
     * Annuler un envoi et son contenu
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_envoi Id de l&#x27;envoi contenant les courriers à annuler (Id retourné par /sendCourrier) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvoiAsyncWithHttpInfo($ww_service_id, $ww_access_token, $id_envoi)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse2002';
        $request = $this->deleteEnvoiRequest($ww_service_id, $ww_access_token, $id_envoi);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnvoi'
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_envoi Id de l&#x27;envoi contenant les courriers à annuler (Id retourné par /sendCourrier) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnvoiRequest($ww_service_id, $ww_access_token, $id_envoi)
    {
        // verify the required parameter 'ww_service_id' is set
        if ($ww_service_id === null || (is_array($ww_service_id) && count($ww_service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_service_id when calling deleteEnvoi'
            );
        }
        // verify the required parameter 'ww_access_token' is set
        if ($ww_access_token === null || (is_array($ww_access_token) && count($ww_access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_access_token when calling deleteEnvoi'
            );
        }
        // verify the required parameter 'id_envoi' is set
        if ($id_envoi === null || (is_array($id_envoi) && count($id_envoi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_envoi when calling deleteEnvoi'
            );
        }

        $resourcePath = '/deleteEnvoi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_envoi !== null) {
            $queryParams['idEnvoi'] = ObjectSerializer::toQueryValue($id_envoi, null);
        }
        // header params
        if ($ww_service_id !== null) {
            $headerParams['ww-service-id'] = ObjectSerializer::toHeaderValue($ww_service_id);
        }
        // header params
        if ($ww_access_token !== null) {
            $headerParams['ww-access-token'] = ObjectSerializer::toHeaderValue($ww_access_token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvoi
     *
     * Lister les courriers d'un envoi en particulier
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_envoi Id de l&#x27;envoi dont on veut extraire les détails. (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MerciFacteurApi\Client\Model\InlineResponse20012
     */
    public function getEnvoi($ww_service_id, $ww_access_token, $id_envoi)
    {
        list($response) = $this->getEnvoiWithHttpInfo($ww_service_id, $ww_access_token, $id_envoi);
        return $response;
    }

    /**
     * Operation getEnvoiWithHttpInfo
     *
     * Lister les courriers d'un envoi en particulier
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_envoi Id de l&#x27;envoi dont on veut extraire les détails. (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MerciFacteurApi\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvoiWithHttpInfo($ww_service_id, $ww_access_token, $id_envoi)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse20012';
        $request = $this->getEnvoiRequest($ww_service_id, $ww_access_token, $id_envoi);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvoiAsync
     *
     * Lister les courriers d'un envoi en particulier
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_envoi Id de l&#x27;envoi dont on veut extraire les détails. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvoiAsync($ww_service_id, $ww_access_token, $id_envoi)
    {
        return $this->getEnvoiAsyncWithHttpInfo($ww_service_id, $ww_access_token, $id_envoi)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvoiAsyncWithHttpInfo
     *
     * Lister les courriers d'un envoi en particulier
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_envoi Id de l&#x27;envoi dont on veut extraire les détails. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvoiAsyncWithHttpInfo($ww_service_id, $ww_access_token, $id_envoi)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse20012';
        $request = $this->getEnvoiRequest($ww_service_id, $ww_access_token, $id_envoi);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvoi'
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_envoi Id de l&#x27;envoi dont on veut extraire les détails. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnvoiRequest($ww_service_id, $ww_access_token, $id_envoi)
    {
        // verify the required parameter 'ww_service_id' is set
        if ($ww_service_id === null || (is_array($ww_service_id) && count($ww_service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_service_id when calling getEnvoi'
            );
        }
        // verify the required parameter 'ww_access_token' is set
        if ($ww_access_token === null || (is_array($ww_access_token) && count($ww_access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_access_token when calling getEnvoi'
            );
        }
        // verify the required parameter 'id_envoi' is set
        if ($id_envoi === null || (is_array($id_envoi) && count($id_envoi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_envoi when calling getEnvoi'
            );
        }

        $resourcePath = '/getEnvoi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_envoi !== null) {
            $queryParams['idEnvoi'] = ObjectSerializer::toQueryValue($id_envoi, null);
        }
        // header params
        if ($ww_service_id !== null) {
            $headerParams['ww-service-id'] = ObjectSerializer::toHeaderValue($ww_service_id);
        }
        // header params
        if ($ww_access_token !== null) {
            $headerParams['ww-access-token'] = ObjectSerializer::toHeaderValue($ww_access_token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPostagePrice
     *
     * Obtenir le montant d'un ou plusieurs courriers (non nécessaire à l'envoi)
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  string[] $mode_envoi Mode d&#x27;envoi du courrier : normal, suivi, lrar ou lrare (required)
     * @param  string[] $card_format Format de la carte (laisser vide si pas de carte) (required)
     * @param  string[] $card_papier Papier de la carte (laisser vide si pas de carte) (required)
     * @param  string[] $card_coin Coins de la carte (laisser vide si pas de carte) (required)
     * @param  int $letter_page_number Nombre de page(s) de lettre (indiquer 0 si pas de lettre) (required)
     * @param  int $photo_number Nombre de photo(s) (indiquer 0 si pas de lettre) (required)
     * @param  string[] $pays_destinataire Tableau de pays de destination, avec une orthographe conforme via /getCountry  (indiquez soit paysDestinataire, soit idDestinataire). (optional)
     * @param  int[] $id_destinataire Tableau d&#x27;id de destinataire(s) déjà créé (indiquez soit paysDestinataire, soit idDestinataire). (optional)
     * @param  string $letter_print_sides rectoverso pour une lettre imprimée recto-verso, recto pour une lettre imprimée en recto simple. (optional, default to recto)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MerciFacteurApi\Client\Model\InlineResponse20010
     */
    public function getPostagePrice($ww_service_id, $ww_access_token, $mode_envoi, $card_format, $card_papier, $card_coin, $letter_page_number, $photo_number, $pays_destinataire = null, $id_destinataire = null, $letter_print_sides = 'recto')
    {
        list($response) = $this->getPostagePriceWithHttpInfo($ww_service_id, $ww_access_token, $mode_envoi, $card_format, $card_papier, $card_coin, $letter_page_number, $photo_number, $pays_destinataire, $id_destinataire, $letter_print_sides);
        return $response;
    }

    /**
     * Operation getPostagePriceWithHttpInfo
     *
     * Obtenir le montant d'un ou plusieurs courriers (non nécessaire à l'envoi)
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  string[] $mode_envoi Mode d&#x27;envoi du courrier : normal, suivi, lrar ou lrare (required)
     * @param  string[] $card_format Format de la carte (laisser vide si pas de carte) (required)
     * @param  string[] $card_papier Papier de la carte (laisser vide si pas de carte) (required)
     * @param  string[] $card_coin Coins de la carte (laisser vide si pas de carte) (required)
     * @param  int $letter_page_number Nombre de page(s) de lettre (indiquer 0 si pas de lettre) (required)
     * @param  int $photo_number Nombre de photo(s) (indiquer 0 si pas de lettre) (required)
     * @param  string[] $pays_destinataire Tableau de pays de destination, avec une orthographe conforme via /getCountry  (indiquez soit paysDestinataire, soit idDestinataire). (optional)
     * @param  int[] $id_destinataire Tableau d&#x27;id de destinataire(s) déjà créé (indiquez soit paysDestinataire, soit idDestinataire). (optional)
     * @param  string $letter_print_sides rectoverso pour une lettre imprimée recto-verso, recto pour une lettre imprimée en recto simple. (optional, default to recto)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MerciFacteurApi\Client\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPostagePriceWithHttpInfo($ww_service_id, $ww_access_token, $mode_envoi, $card_format, $card_papier, $card_coin, $letter_page_number, $photo_number, $pays_destinataire = null, $id_destinataire = null, $letter_print_sides = 'recto')
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse20010';
        $request = $this->getPostagePriceRequest($ww_service_id, $ww_access_token, $mode_envoi, $card_format, $card_papier, $card_coin, $letter_page_number, $photo_number, $pays_destinataire, $id_destinataire, $letter_print_sides);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPostagePriceAsync
     *
     * Obtenir le montant d'un ou plusieurs courriers (non nécessaire à l'envoi)
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  string[] $mode_envoi Mode d&#x27;envoi du courrier : normal, suivi, lrar ou lrare (required)
     * @param  string[] $card_format Format de la carte (laisser vide si pas de carte) (required)
     * @param  string[] $card_papier Papier de la carte (laisser vide si pas de carte) (required)
     * @param  string[] $card_coin Coins de la carte (laisser vide si pas de carte) (required)
     * @param  int $letter_page_number Nombre de page(s) de lettre (indiquer 0 si pas de lettre) (required)
     * @param  int $photo_number Nombre de photo(s) (indiquer 0 si pas de lettre) (required)
     * @param  string[] $pays_destinataire Tableau de pays de destination, avec une orthographe conforme via /getCountry  (indiquez soit paysDestinataire, soit idDestinataire). (optional)
     * @param  int[] $id_destinataire Tableau d&#x27;id de destinataire(s) déjà créé (indiquez soit paysDestinataire, soit idDestinataire). (optional)
     * @param  string $letter_print_sides rectoverso pour une lettre imprimée recto-verso, recto pour une lettre imprimée en recto simple. (optional, default to recto)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPostagePriceAsync($ww_service_id, $ww_access_token, $mode_envoi, $card_format, $card_papier, $card_coin, $letter_page_number, $photo_number, $pays_destinataire = null, $id_destinataire = null, $letter_print_sides = 'recto')
    {
        return $this->getPostagePriceAsyncWithHttpInfo($ww_service_id, $ww_access_token, $mode_envoi, $card_format, $card_papier, $card_coin, $letter_page_number, $photo_number, $pays_destinataire, $id_destinataire, $letter_print_sides)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPostagePriceAsyncWithHttpInfo
     *
     * Obtenir le montant d'un ou plusieurs courriers (non nécessaire à l'envoi)
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  string[] $mode_envoi Mode d&#x27;envoi du courrier : normal, suivi, lrar ou lrare (required)
     * @param  string[] $card_format Format de la carte (laisser vide si pas de carte) (required)
     * @param  string[] $card_papier Papier de la carte (laisser vide si pas de carte) (required)
     * @param  string[] $card_coin Coins de la carte (laisser vide si pas de carte) (required)
     * @param  int $letter_page_number Nombre de page(s) de lettre (indiquer 0 si pas de lettre) (required)
     * @param  int $photo_number Nombre de photo(s) (indiquer 0 si pas de lettre) (required)
     * @param  string[] $pays_destinataire Tableau de pays de destination, avec une orthographe conforme via /getCountry  (indiquez soit paysDestinataire, soit idDestinataire). (optional)
     * @param  int[] $id_destinataire Tableau d&#x27;id de destinataire(s) déjà créé (indiquez soit paysDestinataire, soit idDestinataire). (optional)
     * @param  string $letter_print_sides rectoverso pour une lettre imprimée recto-verso, recto pour une lettre imprimée en recto simple. (optional, default to recto)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPostagePriceAsyncWithHttpInfo($ww_service_id, $ww_access_token, $mode_envoi, $card_format, $card_papier, $card_coin, $letter_page_number, $photo_number, $pays_destinataire = null, $id_destinataire = null, $letter_print_sides = 'recto')
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse20010';
        $request = $this->getPostagePriceRequest($ww_service_id, $ww_access_token, $mode_envoi, $card_format, $card_papier, $card_coin, $letter_page_number, $photo_number, $pays_destinataire, $id_destinataire, $letter_print_sides);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPostagePrice'
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  string[] $mode_envoi Mode d&#x27;envoi du courrier : normal, suivi, lrar ou lrare (required)
     * @param  string[] $card_format Format de la carte (laisser vide si pas de carte) (required)
     * @param  string[] $card_papier Papier de la carte (laisser vide si pas de carte) (required)
     * @param  string[] $card_coin Coins de la carte (laisser vide si pas de carte) (required)
     * @param  int $letter_page_number Nombre de page(s) de lettre (indiquer 0 si pas de lettre) (required)
     * @param  int $photo_number Nombre de photo(s) (indiquer 0 si pas de lettre) (required)
     * @param  string[] $pays_destinataire Tableau de pays de destination, avec une orthographe conforme via /getCountry  (indiquez soit paysDestinataire, soit idDestinataire). (optional)
     * @param  int[] $id_destinataire Tableau d&#x27;id de destinataire(s) déjà créé (indiquez soit paysDestinataire, soit idDestinataire). (optional)
     * @param  string $letter_print_sides rectoverso pour une lettre imprimée recto-verso, recto pour une lettre imprimée en recto simple. (optional, default to recto)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPostagePriceRequest($ww_service_id, $ww_access_token, $mode_envoi, $card_format, $card_papier, $card_coin, $letter_page_number, $photo_number, $pays_destinataire = null, $id_destinataire = null, $letter_print_sides = 'recto')
    {
        // verify the required parameter 'ww_service_id' is set
        if ($ww_service_id === null || (is_array($ww_service_id) && count($ww_service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_service_id when calling getPostagePrice'
            );
        }
        // verify the required parameter 'ww_access_token' is set
        if ($ww_access_token === null || (is_array($ww_access_token) && count($ww_access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_access_token when calling getPostagePrice'
            );
        }
        // verify the required parameter 'mode_envoi' is set
        if ($mode_envoi === null || (is_array($mode_envoi) && count($mode_envoi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mode_envoi when calling getPostagePrice'
            );
        }
        // verify the required parameter 'card_format' is set
        if ($card_format === null || (is_array($card_format) && count($card_format) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_format when calling getPostagePrice'
            );
        }
        // verify the required parameter 'card_papier' is set
        if ($card_papier === null || (is_array($card_papier) && count($card_papier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_papier when calling getPostagePrice'
            );
        }
        // verify the required parameter 'card_coin' is set
        if ($card_coin === null || (is_array($card_coin) && count($card_coin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_coin when calling getPostagePrice'
            );
        }
        // verify the required parameter 'letter_page_number' is set
        if ($letter_page_number === null || (is_array($letter_page_number) && count($letter_page_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $letter_page_number when calling getPostagePrice'
            );
        }
        // verify the required parameter 'photo_number' is set
        if ($photo_number === null || (is_array($photo_number) && count($photo_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $photo_number when calling getPostagePrice'
            );
        }

        $resourcePath = '/getPostagePrice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($mode_envoi)) {
            $mode_envoi = ObjectSerializer::serializeCollection($mode_envoi, 'multi', true);
        }
        if ($mode_envoi !== null) {
            $queryParams['modeEnvoi'] = ObjectSerializer::toQueryValue($mode_envoi, null);
        }
        // query params
        if (is_array($pays_destinataire)) {
            $pays_destinataire = ObjectSerializer::serializeCollection($pays_destinataire, 'multi', true);
        }
        if ($pays_destinataire !== null) {
            $queryParams['paysDestinataire[]'] = ObjectSerializer::toQueryValue($pays_destinataire, null);
        }
        // query params
        if (is_array($id_destinataire)) {
            $id_destinataire = ObjectSerializer::serializeCollection($id_destinataire, 'multi', true);
        }
        if ($id_destinataire !== null) {
            $queryParams['idDestinataire[]'] = ObjectSerializer::toQueryValue($id_destinataire, null);
        }
        // query params
        if (is_array($card_format)) {
            $card_format = ObjectSerializer::serializeCollection($card_format, 'multi', true);
        }
        if ($card_format !== null) {
            $queryParams['cardFormat'] = ObjectSerializer::toQueryValue($card_format, null);
        }
        // query params
        if (is_array($card_papier)) {
            $card_papier = ObjectSerializer::serializeCollection($card_papier, 'multi', true);
        }
        if ($card_papier !== null) {
            $queryParams['cardPapier'] = ObjectSerializer::toQueryValue($card_papier, null);
        }
        // query params
        if (is_array($card_coin)) {
            $card_coin = ObjectSerializer::serializeCollection($card_coin, 'multi', true);
        }
        if ($card_coin !== null) {
            $queryParams['cardCoin'] = ObjectSerializer::toQueryValue($card_coin, null);
        }
        // query params
        if ($letter_page_number !== null) {
            $queryParams['letterPageNumber'] = ObjectSerializer::toQueryValue($letter_page_number, null);
        }
        // query params
        if ($letter_print_sides !== null) {
            $queryParams['letterPrintSides'] = ObjectSerializer::toQueryValue($letter_print_sides, null);
        }
        // query params
        if ($photo_number !== null) {
            $queryParams['photoNumber'] = ObjectSerializer::toQueryValue($photo_number, null);
        }
        // header params
        if ($ww_service_id !== null) {
            $headerParams['ww-service-id'] = ObjectSerializer::toHeaderValue($ww_service_id);
        }
        // header params
        if ($ww_access_token !== null) {
            $headerParams['ww-access-token'] = ObjectSerializer::toHeaderValue($ww_access_token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProof
     *
     * Obtenir les documents preuves d'un courrier (preuve de dépôt, preuve de réception, preuve de télechargement, etc.)
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  string $tracking_number Numéro de suivi du courrier. (required)
     * @param  string $document Le document de preuve souhaité : depot (preuve de dépôt), reception (avis de réception), ou telechargement (preuve de téléchargement). (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MerciFacteurApi\Client\Model\InlineResponse20017
     */
    public function getProof($ww_service_id, $ww_access_token, $tracking_number, $document)
    {
        list($response) = $this->getProofWithHttpInfo($ww_service_id, $ww_access_token, $tracking_number, $document);
        return $response;
    }

    /**
     * Operation getProofWithHttpInfo
     *
     * Obtenir les documents preuves d'un courrier (preuve de dépôt, preuve de réception, preuve de télechargement, etc.)
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  string $tracking_number Numéro de suivi du courrier. (required)
     * @param  string $document Le document de preuve souhaité : depot (preuve de dépôt), reception (avis de réception), ou telechargement (preuve de téléchargement). (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MerciFacteurApi\Client\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProofWithHttpInfo($ww_service_id, $ww_access_token, $tracking_number, $document)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse20017';
        $request = $this->getProofRequest($ww_service_id, $ww_access_token, $tracking_number, $document);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse20017',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProofAsync
     *
     * Obtenir les documents preuves d'un courrier (preuve de dépôt, preuve de réception, preuve de télechargement, etc.)
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  string $tracking_number Numéro de suivi du courrier. (required)
     * @param  string $document Le document de preuve souhaité : depot (preuve de dépôt), reception (avis de réception), ou telechargement (preuve de téléchargement). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProofAsync($ww_service_id, $ww_access_token, $tracking_number, $document)
    {
        return $this->getProofAsyncWithHttpInfo($ww_service_id, $ww_access_token, $tracking_number, $document)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProofAsyncWithHttpInfo
     *
     * Obtenir les documents preuves d'un courrier (preuve de dépôt, preuve de réception, preuve de télechargement, etc.)
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  string $tracking_number Numéro de suivi du courrier. (required)
     * @param  string $document Le document de preuve souhaité : depot (preuve de dépôt), reception (avis de réception), ou telechargement (preuve de téléchargement). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProofAsyncWithHttpInfo($ww_service_id, $ww_access_token, $tracking_number, $document)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse20017';
        $request = $this->getProofRequest($ww_service_id, $ww_access_token, $tracking_number, $document);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProof'
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  string $tracking_number Numéro de suivi du courrier. (required)
     * @param  string $document Le document de preuve souhaité : depot (preuve de dépôt), reception (avis de réception), ou telechargement (preuve de téléchargement). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProofRequest($ww_service_id, $ww_access_token, $tracking_number, $document)
    {
        // verify the required parameter 'ww_service_id' is set
        if ($ww_service_id === null || (is_array($ww_service_id) && count($ww_service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_service_id when calling getProof'
            );
        }
        // verify the required parameter 'ww_access_token' is set
        if ($ww_access_token === null || (is_array($ww_access_token) && count($ww_access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_access_token when calling getProof'
            );
        }
        // verify the required parameter 'tracking_number' is set
        if ($tracking_number === null || (is_array($tracking_number) && count($tracking_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tracking_number when calling getProof'
            );
        }
        // verify the required parameter 'document' is set
        if ($document === null || (is_array($document) && count($document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document when calling getProof'
            );
        }

        $resourcePath = '/getProof';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tracking_number !== null) {
            $queryParams['trackingNumber'] = ObjectSerializer::toQueryValue($tracking_number, null);
        }
        // query params
        if ($document !== null) {
            $queryParams['document'] = ObjectSerializer::toQueryValue($document, null);
        }
        // header params
        if ($ww_service_id !== null) {
            $headerParams['ww-service-id'] = ObjectSerializer::toHeaderValue($ww_service_id);
        }
        // header params
        if ($ww_access_token !== null) {
            $headerParams['ww-access-token'] = ObjectSerializer::toHeaderValue($ww_access_token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSuiviEnvoi
     *
     * Obtenir le suivi et l'état des courriers d'un envoi
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_envoi Id de l&#x27;envoi dont on veut extraire le suivi. (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MerciFacteurApi\Client\Model\InlineResponse20016
     */
    public function getSuiviEnvoi($ww_service_id, $ww_access_token, $id_envoi)
    {
        list($response) = $this->getSuiviEnvoiWithHttpInfo($ww_service_id, $ww_access_token, $id_envoi);
        return $response;
    }

    /**
     * Operation getSuiviEnvoiWithHttpInfo
     *
     * Obtenir le suivi et l'état des courriers d'un envoi
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_envoi Id de l&#x27;envoi dont on veut extraire le suivi. (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MerciFacteurApi\Client\Model\InlineResponse20016, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSuiviEnvoiWithHttpInfo($ww_service_id, $ww_access_token, $id_envoi)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse20016';
        $request = $this->getSuiviEnvoiRequest($ww_service_id, $ww_access_token, $id_envoi);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse20016',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSuiviEnvoiAsync
     *
     * Obtenir le suivi et l'état des courriers d'un envoi
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_envoi Id de l&#x27;envoi dont on veut extraire le suivi. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSuiviEnvoiAsync($ww_service_id, $ww_access_token, $id_envoi)
    {
        return $this->getSuiviEnvoiAsyncWithHttpInfo($ww_service_id, $ww_access_token, $id_envoi)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSuiviEnvoiAsyncWithHttpInfo
     *
     * Obtenir le suivi et l'état des courriers d'un envoi
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_envoi Id de l&#x27;envoi dont on veut extraire le suivi. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSuiviEnvoiAsyncWithHttpInfo($ww_service_id, $ww_access_token, $id_envoi)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse20016';
        $request = $this->getSuiviEnvoiRequest($ww_service_id, $ww_access_token, $id_envoi);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSuiviEnvoi'
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_envoi Id de l&#x27;envoi dont on veut extraire le suivi. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSuiviEnvoiRequest($ww_service_id, $ww_access_token, $id_envoi)
    {
        // verify the required parameter 'ww_service_id' is set
        if ($ww_service_id === null || (is_array($ww_service_id) && count($ww_service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_service_id when calling getSuiviEnvoi'
            );
        }
        // verify the required parameter 'ww_access_token' is set
        if ($ww_access_token === null || (is_array($ww_access_token) && count($ww_access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_access_token when calling getSuiviEnvoi'
            );
        }
        // verify the required parameter 'id_envoi' is set
        if ($id_envoi === null || (is_array($id_envoi) && count($id_envoi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_envoi when calling getSuiviEnvoi'
            );
        }

        $resourcePath = '/getSuiviEnvoi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_envoi !== null) {
            $queryParams['idEnvoi'] = ObjectSerializer::toQueryValue($id_envoi, null);
        }
        // header params
        if ($ww_service_id !== null) {
            $headerParams['ww-service-id'] = ObjectSerializer::toHeaderValue($ww_service_id);
        }
        // header params
        if ($ww_access_token !== null) {
            $headerParams['ww-access-token'] = ObjectSerializer::toHeaderValue($ww_access_token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listEnvois
     *
     * Lister les 50 derniers envois d'un utilisateur
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_user User Id de l&#x27;utilisateur dont on veut lister les envois. (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MerciFacteurApi\Client\Model\InlineResponse20011
     */
    public function listEnvois($ww_service_id, $ww_access_token, $id_user)
    {
        list($response) = $this->listEnvoisWithHttpInfo($ww_service_id, $ww_access_token, $id_user);
        return $response;
    }

    /**
     * Operation listEnvoisWithHttpInfo
     *
     * Lister les 50 derniers envois d'un utilisateur
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_user User Id de l&#x27;utilisateur dont on veut lister les envois. (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MerciFacteurApi\Client\Model\InlineResponse20011, HTTP status code, HTTP response headers (array of strings)
     */
    public function listEnvoisWithHttpInfo($ww_service_id, $ww_access_token, $id_user)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse20011';
        $request = $this->listEnvoisRequest($ww_service_id, $ww_access_token, $id_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse20011',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listEnvoisAsync
     *
     * Lister les 50 derniers envois d'un utilisateur
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_user User Id de l&#x27;utilisateur dont on veut lister les envois. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listEnvoisAsync($ww_service_id, $ww_access_token, $id_user)
    {
        return $this->listEnvoisAsyncWithHttpInfo($ww_service_id, $ww_access_token, $id_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listEnvoisAsyncWithHttpInfo
     *
     * Lister les 50 derniers envois d'un utilisateur
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_user User Id de l&#x27;utilisateur dont on veut lister les envois. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listEnvoisAsyncWithHttpInfo($ww_service_id, $ww_access_token, $id_user)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse20011';
        $request = $this->listEnvoisRequest($ww_service_id, $ww_access_token, $id_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listEnvois'
     *
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     * @param  int $id_user User Id de l&#x27;utilisateur dont on veut lister les envois. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listEnvoisRequest($ww_service_id, $ww_access_token, $id_user)
    {
        // verify the required parameter 'ww_service_id' is set
        if ($ww_service_id === null || (is_array($ww_service_id) && count($ww_service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_service_id when calling listEnvois'
            );
        }
        // verify the required parameter 'ww_access_token' is set
        if ($ww_access_token === null || (is_array($ww_access_token) && count($ww_access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_access_token when calling listEnvois'
            );
        }
        // verify the required parameter 'id_user' is set
        if ($id_user === null || (is_array($id_user) && count($id_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_user when calling listEnvois'
            );
        }

        $resourcePath = '/listEnvois';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_user !== null) {
            $queryParams['idUser'] = ObjectSerializer::toQueryValue($id_user, null);
        }
        // header params
        if ($ww_service_id !== null) {
            $headerParams['ww-service-id'] = ObjectSerializer::toHeaderValue($ww_service_id);
        }
        // header params
        if ($ww_access_token !== null) {
            $headerParams['ww-access-token'] = ObjectSerializer::toHeaderValue($ww_access_token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendCourrier
     *
     * Valider l'envoi d'un courrier
     *
     * @param  int $id_user id_user (required)
     * @param  string $mode_envoi mode_envoi (required)
     * @param  \MerciFacteurApi\Client\Model\AdressSendCourrier $adress adress (required)
     * @param  string $date_envoi date_envoi (required)
     * @param  string $designation designation (required)
     * @param  \MerciFacteurApi\Client\Model\SendCourrierAnonymize $anonymize anonymize (required)
     * @param  \MerciFacteurApi\Client\Model\SendCourrierContent $content content (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MerciFacteurApi\Client\Model\InlineResponse2009
     */
    public function sendCourrier($id_user, $mode_envoi, $adress, $date_envoi, $designation, $anonymize, $content, $ww_service_id, $ww_access_token)
    {
        list($response) = $this->sendCourrierWithHttpInfo($id_user, $mode_envoi, $adress, $date_envoi, $designation, $anonymize, $content, $ww_service_id, $ww_access_token);
        return $response;
    }

    /**
     * Operation sendCourrierWithHttpInfo
     *
     * Valider l'envoi d'un courrier
     *
     * @param  int $id_user (required)
     * @param  string $mode_envoi (required)
     * @param  \MerciFacteurApi\Client\Model\AdressSendCourrier $adress (required)
     * @param  string $date_envoi (required)
     * @param  string $designation (required)
     * @param  \MerciFacteurApi\Client\Model\SendCourrierAnonymize $anonymize (required)
     * @param  \MerciFacteurApi\Client\Model\SendCourrierContent $content (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MerciFacteurApi\Client\Model\InlineResponse2009, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendCourrierWithHttpInfo($id_user, $mode_envoi, $adress, $date_envoi, $designation, $anonymize, $content, $ww_service_id, $ww_access_token)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse2009';
        $request = $this->sendCourrierRequest($id_user, $mode_envoi, $adress, $date_envoi, $designation, $anonymize, $content, $ww_service_id, $ww_access_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse2009',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendCourrierAsync
     *
     * Valider l'envoi d'un courrier
     *
     * @param  int $id_user (required)
     * @param  string $mode_envoi (required)
     * @param  \MerciFacteurApi\Client\Model\AdressSendCourrier $adress (required)
     * @param  string $date_envoi (required)
     * @param  string $designation (required)
     * @param  \MerciFacteurApi\Client\Model\SendCourrierAnonymize $anonymize (required)
     * @param  \MerciFacteurApi\Client\Model\SendCourrierContent $content (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendCourrierAsync($id_user, $mode_envoi, $adress, $date_envoi, $designation, $anonymize, $content, $ww_service_id, $ww_access_token)
    {
        return $this->sendCourrierAsyncWithHttpInfo($id_user, $mode_envoi, $adress, $date_envoi, $designation, $anonymize, $content, $ww_service_id, $ww_access_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendCourrierAsyncWithHttpInfo
     *
     * Valider l'envoi d'un courrier
     *
     * @param  int $id_user (required)
     * @param  string $mode_envoi (required)
     * @param  \MerciFacteurApi\Client\Model\AdressSendCourrier $adress (required)
     * @param  string $date_envoi (required)
     * @param  string $designation (required)
     * @param  \MerciFacteurApi\Client\Model\SendCourrierAnonymize $anonymize (required)
     * @param  \MerciFacteurApi\Client\Model\SendCourrierContent $content (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendCourrierAsyncWithHttpInfo($id_user, $mode_envoi, $adress, $date_envoi, $designation, $anonymize, $content, $ww_service_id, $ww_access_token)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse2009';
        $request = $this->sendCourrierRequest($id_user, $mode_envoi, $adress, $date_envoi, $designation, $anonymize, $content, $ww_service_id, $ww_access_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendCourrier'
     *
     * @param  int $id_user (required)
     * @param  string $mode_envoi (required)
     * @param  \MerciFacteurApi\Client\Model\AdressSendCourrier $adress (required)
     * @param  string $date_envoi (required)
     * @param  string $designation (required)
     * @param  \MerciFacteurApi\Client\Model\SendCourrierAnonymize $anonymize (required)
     * @param  \MerciFacteurApi\Client\Model\SendCourrierContent $content (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendCourrierRequest($id_user, $mode_envoi, $adress, $date_envoi, $designation, $anonymize, $content, $ww_service_id, $ww_access_token)
    {
        // verify the required parameter 'id_user' is set
        if ($id_user === null || (is_array($id_user) && count($id_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_user when calling sendCourrier'
            );
        }
        // verify the required parameter 'mode_envoi' is set
        if ($mode_envoi === null || (is_array($mode_envoi) && count($mode_envoi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mode_envoi when calling sendCourrier'
            );
        }
        // verify the required parameter 'adress' is set
        if ($adress === null || (is_array($adress) && count($adress) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adress when calling sendCourrier'
            );
        }
        // verify the required parameter 'date_envoi' is set
        if ($date_envoi === null || (is_array($date_envoi) && count($date_envoi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_envoi when calling sendCourrier'
            );
        }
        // verify the required parameter 'designation' is set
        if ($designation === null || (is_array($designation) && count($designation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $designation when calling sendCourrier'
            );
        }
        // verify the required parameter 'anonymize' is set
        if ($anonymize === null || (is_array($anonymize) && count($anonymize) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $anonymize when calling sendCourrier'
            );
        }
        // verify the required parameter 'content' is set
        if ($content === null || (is_array($content) && count($content) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content when calling sendCourrier'
            );
        }
        // verify the required parameter 'ww_service_id' is set
        if ($ww_service_id === null || (is_array($ww_service_id) && count($ww_service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_service_id when calling sendCourrier'
            );
        }
        // verify the required parameter 'ww_access_token' is set
        if ($ww_access_token === null || (is_array($ww_access_token) && count($ww_access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_access_token when calling sendCourrier'
            );
        }

        $resourcePath = '/sendCourrier';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($ww_service_id !== null) {
            $headerParams['ww-service-id'] = ObjectSerializer::toHeaderValue($ww_service_id);
        }
        // header params
        if ($ww_access_token !== null) {
            $headerParams['ww-access-token'] = ObjectSerializer::toHeaderValue($ww_access_token);
        }


        // form params
        if ($id_user !== null) {
            $formParams['idUser'] = ObjectSerializer::toFormValue($id_user);
        }
        // form params
        if ($mode_envoi !== null) {
            $formParams['modeEnvoi'] = ObjectSerializer::toFormValue($mode_envoi);
        }
        // form params
        if ($adress !== null) {
            $formParams['adress'] = ObjectSerializer::toFormValue($adress);
        }
        // form params
        if ($date_envoi !== null) {
            $formParams['dateEnvoi'] = ObjectSerializer::toFormValue($date_envoi);
        }
        // form params
        if ($designation !== null) {
            $formParams['designation'] = ObjectSerializer::toFormValue($designation);
        }
        // form params
        if ($anonymize !== null) {
            $formParams['anonymize'] = ObjectSerializer::toFormValue($anonymize);
        }
        // form params
        if ($content !== null) {
            $formParams['content'] = ObjectSerializer::toFormValue($content);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadFile
     *
     * Charger des fichiers dans un token pour les envoyer dans un courrier (facultatif) - uniquement disponible pour l'envoi de photos actuellement
     *
     * @param  int $id_user id_user (required)
     * @param  string $token token (required)
     * @param  string $product product (required)
     * @param  string $type type (required)
     * @param  string $file file (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MerciFacteurApi\Client\Model\InlineResponse2008
     */
    public function uploadFile($id_user, $token, $product, $type, $file, $ww_service_id, $ww_access_token)
    {
        list($response) = $this->uploadFileWithHttpInfo($id_user, $token, $product, $type, $file, $ww_service_id, $ww_access_token);
        return $response;
    }

    /**
     * Operation uploadFileWithHttpInfo
     *
     * Charger des fichiers dans un token pour les envoyer dans un courrier (facultatif) - uniquement disponible pour l'envoi de photos actuellement
     *
     * @param  int $id_user (required)
     * @param  string $token (required)
     * @param  string $product (required)
     * @param  string $type (required)
     * @param  string $file (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \MerciFacteurApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MerciFacteurApi\Client\Model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadFileWithHttpInfo($id_user, $token, $product, $type, $file, $ww_service_id, $ww_access_token)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse2008';
        $request = $this->uploadFileRequest($id_user, $token, $product, $type, $file, $ww_service_id, $ww_access_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse2008',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MerciFacteurApi\Client\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadFileAsync
     *
     * Charger des fichiers dans un token pour les envoyer dans un courrier (facultatif) - uniquement disponible pour l'envoi de photos actuellement
     *
     * @param  int $id_user (required)
     * @param  string $token (required)
     * @param  string $product (required)
     * @param  string $type (required)
     * @param  string $file (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadFileAsync($id_user, $token, $product, $type, $file, $ww_service_id, $ww_access_token)
    {
        return $this->uploadFileAsyncWithHttpInfo($id_user, $token, $product, $type, $file, $ww_service_id, $ww_access_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadFileAsyncWithHttpInfo
     *
     * Charger des fichiers dans un token pour les envoyer dans un courrier (facultatif) - uniquement disponible pour l'envoi de photos actuellement
     *
     * @param  int $id_user (required)
     * @param  string $token (required)
     * @param  string $product (required)
     * @param  string $type (required)
     * @param  string $file (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadFileAsyncWithHttpInfo($id_user, $token, $product, $type, $file, $ww_service_id, $ww_access_token)
    {
        $returnType = '\MerciFacteurApi\Client\Model\InlineResponse2008';
        $request = $this->uploadFileRequest($id_user, $token, $product, $type, $file, $ww_service_id, $ww_access_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadFile'
     *
     * @param  int $id_user (required)
     * @param  string $token (required)
     * @param  string $product (required)
     * @param  string $type (required)
     * @param  string $file (required)
     * @param  string $ww_service_id Votre service Id (required)
     * @param  string $ww_access_token Un access token valide (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uploadFileRequest($id_user, $token, $product, $type, $file, $ww_service_id, $ww_access_token)
    {
        // verify the required parameter 'id_user' is set
        if ($id_user === null || (is_array($id_user) && count($id_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_user when calling uploadFile'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling uploadFile'
            );
        }
        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling uploadFile'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling uploadFile'
            );
        }
        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling uploadFile'
            );
        }
        // verify the required parameter 'ww_service_id' is set
        if ($ww_service_id === null || (is_array($ww_service_id) && count($ww_service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_service_id when calling uploadFile'
            );
        }
        // verify the required parameter 'ww_access_token' is set
        if ($ww_access_token === null || (is_array($ww_access_token) && count($ww_access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ww_access_token when calling uploadFile'
            );
        }

        $resourcePath = '/uploadFile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($ww_service_id !== null) {
            $headerParams['ww-service-id'] = ObjectSerializer::toHeaderValue($ww_service_id);
        }
        // header params
        if ($ww_access_token !== null) {
            $headerParams['ww-access-token'] = ObjectSerializer::toHeaderValue($ww_access_token);
        }


        // form params
        if ($id_user !== null) {
            $formParams['idUser'] = ObjectSerializer::toFormValue($id_user);
        }
        // form params
        if ($token !== null) {
            $formParams['token'] = ObjectSerializer::toFormValue($token);
        }
        // form params
        if ($product !== null) {
            $formParams['product'] = ObjectSerializer::toFormValue($product);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($file !== null) {
            $formParams['file'] = ObjectSerializer::toFormValue($file);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

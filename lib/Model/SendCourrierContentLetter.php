<?php
/**
 * SendCourrierContentLetter
 *
 * PHP version 5
 *
 * @category Class
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merci facteur API
 *
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MerciFacteurApi\Client\Model;

use \ArrayAccess;
use \MerciFacteurApi\Client\ObjectSerializer;

/**
 * SendCourrierContentLetter Class Doc Comment
 *
 * @category Class
 * @description Définition du contenu de la lettre, envoyer une chaine vide si pas de lettre dans ce courrier (&#x3D;&#x27;&#x27;)
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SendCourrierContentLetter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sendCourrier_content_letter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'files' => '\MerciFacteurApi\Client\Model\FilesSendCourrier',
        'base64files' => '\MerciFacteurApi\Client\Model\Base64FilesSendCourrier',
        'final_filename' => 'string',
        'print_sides' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'files' => null,
        'base64files' => null,
        'final_filename' => null,
        'print_sides' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'files' => 'files',
        'base64files' => 'base64files',
        'final_filename' => 'final_filename',
        'print_sides' => 'print_sides'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'files' => 'setFiles',
        'base64files' => 'setBase64files',
        'final_filename' => 'setFinalFilename',
        'print_sides' => 'setPrintSides'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'files' => 'getFiles',
        'base64files' => 'getBase64files',
        'final_filename' => 'getFinalFilename',
        'print_sides' => 'getPrintSides'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRINT_SIDES_RECTO = 'recto';
    const PRINT_SIDES_RECTOVERSO = 'rectoverso';
    const PRINT_SIDES_DISTINCTRECTOVERSO = 'distinctrectoverso';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrintSidesAllowableValues()
    {
        return [
            self::PRINT_SIDES_RECTO
            self::PRINT_SIDES_RECTOVERSO
            self::PRINT_SIDES_DISTINCTRECTOVERSO
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
        $this->container['base64files'] = isset($data['base64files']) ? $data['base64files'] : null;
        $this->container['final_filename'] = isset($data['final_filename']) ? $data['final_filename'] : null;
        $this->container['print_sides'] = isset($data['print_sides']) ? $data['print_sides'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPrintSidesAllowableValues();
        if (!is_null($this->container['print_sides']) && !in_array($this->container['print_sides'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'print_sides', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets files
     *
     * @return \MerciFacteurApi\Client\Model\FilesSendCourrier
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \MerciFacteurApi\Client\Model\FilesSendCourrier $files files
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets base64files
     *
     * @return \MerciFacteurApi\Client\Model\Base64FilesSendCourrier
     */
    public function getBase64files()
    {
        return $this->container['base64files'];
    }

    /**
     * Sets base64files
     *
     * @param \MerciFacteurApi\Client\Model\Base64FilesSendCourrier $base64files base64files
     *
     * @return $this
     */
    public function setBase64files($base64files)
    {
        $this->container['base64files'] = $base64files;

        return $this;
    }

    /**
     * Gets final_filename
     *
     * @return string
     */
    public function getFinalFilename()
    {
        return $this->container['final_filename'];
    }

    /**
     * Sets final_filename
     *
     * @param string $final_filename Facultatif, maximum 50 caractères, vous pouvez spécifier le nom de fichier que vous souhaitez pour votre lettre. Ne mettez pas d''extension, '.pdf' sera ajouté à la fin. Il sera visible dans votre interface Merci facteur Pro pour faciliter vos recherches. Dans le cas d'envois recommandés électroniques (ERE), ce nom de fichier sera visible par le destinataire.
     *
     * @return $this
     */
    public function setFinalFilename($final_filename)
    {
        $this->container['final_filename'] = $final_filename;

        return $this;
    }

    /**
     * Gets print_sides
     *
     * @return string
     */
    public function getPrintSides()
    {
        return $this->container['print_sides'];
    }

    /**
     * Sets print_sides
     *
     * @param string $print_sides rectoverso si vous souhaitez une impression recto/verso, ou recto si vous souhaitez une impression recto simple, ou distinctrectoverso si vous souhaitez une impression recto/verso et que nous insérions une page blanche après les fichiers au nombre de pages impair.
     *
     * @return $this
     */
    public function setPrintSides($print_sides)
    {
        $allowedValues = $this->getPrintSidesAllowableValues();
        if (!is_null($print_sides) && !in_array($print_sides, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'print_sides', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['print_sides'] = $print_sides;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

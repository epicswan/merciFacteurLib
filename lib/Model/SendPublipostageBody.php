<?php

/**
 * SendPublipostageBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merci facteur API
 *
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MerciFacteurApi\Client\Model;

use \ArrayAccess;
use \MerciFacteurApi\Client\ObjectSerializer;

/**
 * SendPublipostageBody Class Doc Comment
 *
 * @category Class
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SendPublipostageBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'sendPublipostage_body';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'id_envoi' => 'int',
        'id_exp' => 'int',
        'json_exp' => 'string',
        'mode_envoi' => 'string',
        'anonymize' => '\MerciFacteurApi\Client\Model\SendCourrierAnonymize'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'id_envoi' => null,
        'id_exp' => null,
        'json_exp' => null,
        'mode_envoi' => null,
        'anonymize' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_envoi' => 'idEnvoi',
        'id_exp' => 'idExp',
        'json_exp' => 'jsonExp',
        'mode_envoi' => 'modeEnvoi',
        'anonymize' => 'anonymize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_envoi' => 'setIdEnvoi',
        'id_exp' => 'setIdExp',
        'json_exp' => 'setJsonExp',
        'mode_envoi' => 'setModeEnvoi',
        'anonymize' => 'setAnonymize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_envoi' => 'getIdEnvoi',
        'id_exp' => 'getIdExp',
        'json_exp' => 'getJsonExp',
        'mode_envoi' => 'getModeEnvoi',
        'anonymize' => 'getAnonymize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MODE_ENVOI_NORMAL = 'normal';
    const MODE_ENVOI_SUIVI = 'suivi';
    const MODE_ENVOI_LRAR = 'lrar';
    const MODE_ENVOI_LRARE = 'lrare';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeEnvoiAllowableValues()
    {
        return [
            self::MODE_ENVOI_NORMAL,
            self::MODE_ENVOI_SUIVI,
            self::MODE_ENVOI_LRAR,
            self::MODE_ENVOI_LRARE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_envoi'] = isset($data['id_envoi']) ? $data['id_envoi'] : null;
        $this->container['id_exp'] = isset($data['id_exp']) ? $data['id_exp'] : null;
        $this->container['json_exp'] = isset($data['json_exp']) ? $data['json_exp'] : null;
        $this->container['mode_envoi'] = isset($data['mode_envoi']) ? $data['mode_envoi'] : null;
        $this->container['anonymize'] = isset($data['anonymize']) ? $data['anonymize'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getModeEnvoiAllowableValues();
        if (!is_null($this->container['mode_envoi']) && !in_array($this->container['mode_envoi'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mode_envoi', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_envoi
     *
     * @return int
     */
    public function getIdEnvoi()
    {
        return $this->container['id_envoi'];
    }

    /**
     * Sets id_envoi
     *
     * @param int $id_envoi Identifiant de l'envoi qui vous a été retourné par \\sourcePublipostage
     *
     * @return $this
     */
    public function setIdEnvoi($id_envoi)
    {
        $this->container['id_envoi'] = $id_envoi;

        return $this;
    }

    /**
     * Gets id_exp
     *
     * @return int
     */
    public function getIdExp()
    {
        return $this->container['id_exp'];
    }

    /**
     * Sets id_exp
     *
     * @param int $id_exp Id de l'adresse d'expéditeur (créée auparavant avec /setNewAdress) - si vous utilisez \"idExp\", laissez vide \"jsonExp\".
     *
     * @return $this
     */
    public function setIdExp($id_exp)
    {
        $this->container['id_exp'] = $id_exp;

        return $this;
    }

    /**
     * Gets json_exp
     *
     * @return string
     */
    public function getJsonExp()
    {
        return $this->container['json_exp'];
    }

    /**
     * Sets json_exp
     *
     * @param string $json_exp json contenant l'adresse d'expéditeur (si vous ne souhaitez pas créer l'adresse auparavant avec /setNewAdress) - si vous utilisez \"jsonExp\", laissez vide \"idExp\".
     *
     * @return $this
     */
    public function setJsonExp($json_exp)
    {
        $this->container['json_exp'] = $json_exp;

        return $this;
    }

    /**
     * Gets mode_envoi
     *
     * @return string
     */
    public function getModeEnvoi()
    {
        return $this->container['mode_envoi'];
    }

    /**
     * Sets mode_envoi
     *
     * @param string $mode_envoi Mode d'envoi du courrier : suivi, lrar, lrare, ou normal
     *
     * @return $this
     */
    public function setModeEnvoi($mode_envoi)
    {
        $allowedValues = $this->getModeEnvoiAllowableValues();
        if (!is_null($mode_envoi) && !in_array($mode_envoi, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mode_envoi', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode_envoi'] = $mode_envoi;

        return $this;
    }

    /**
     * Gets anonymize
     *
     * @return \MerciFacteurApi\Client\Model\SendCourrierAnonymize
     */
    public function getAnonymize()
    {
        return $this->container['anonymize'];
    }

    /**
     * Sets anonymize
     *
     * @param \MerciFacteurApi\Client\Model\SendCourrierAnonymize $anonymize anonymize
     *
     * @return $this
     */
    public function setAnonymize($anonymize)
    {
        $this->container['anonymize'] = $anonymize;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

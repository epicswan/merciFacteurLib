<?php

/**
 * SendCourrierBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merci facteur API
 *
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MerciFacteurApi\Client\Model;

use \ArrayAccess;
use \MerciFacteurApi\Client\ObjectSerializer;

/**
 * SendCourrierBody Class Doc Comment
 *
 * @category Class
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SendCourrierBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'sendCourrier_body';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'id_user' => 'int',
        'mode_envoi' => 'string',
        'adress' => '\MerciFacteurApi\Client\Model\AdressSendCourrier',
        'date_envoi' => 'string',
        'designation' => 'string',
        'anonymize' => '\MerciFacteurApi\Client\Model\SendCourrierAnonymize',
        'content' => '\MerciFacteurApi\Client\Model\SendCourrierContent'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'id_user' => null,
        'mode_envoi' => null,
        'adress' => null,
        'date_envoi' => null,
        'designation' => null,
        'anonymize' => null,
        'content' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_user' => 'idUser',
        'mode_envoi' => 'modeEnvoi',
        'adress' => 'adress',
        'date_envoi' => 'dateEnvoi',
        'designation' => 'designation',
        'anonymize' => 'anonymize',
        'content' => 'content'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_user' => 'setIdUser',
        'mode_envoi' => 'setModeEnvoi',
        'adress' => 'setAdress',
        'date_envoi' => 'setDateEnvoi',
        'designation' => 'setDesignation',
        'anonymize' => 'setAnonymize',
        'content' => 'setContent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_user' => 'getIdUser',
        'mode_envoi' => 'getModeEnvoi',
        'adress' => 'getAdress',
        'date_envoi' => 'getDateEnvoi',
        'designation' => 'getDesignation',
        'anonymize' => 'getAnonymize',
        'content' => 'getContent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MODE_ENVOI_NORMAL = 'normal';
    const MODE_ENVOI_SUIVI = 'suivi';
    const MODE_ENVOI_LRAR = 'lrar';
    const MODE_ENVOI_LRARE = 'lrare';
    const MODE_ENVOI_ERE_OTP_MAIL = 'ere_otp_mail';
    const MODE_ENVOI_ERE_OTP_SMS = 'ere_otp_sms';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeEnvoiAllowableValues()
    {
        return [
            self::MODE_ENVOI_NORMAL,
            self::MODE_ENVOI_SUIVI,
            self::MODE_ENVOI_LRAR,
            self::MODE_ENVOI_LRARE,
            self::MODE_ENVOI_ERE_OTP_MAIL,
            self::MODE_ENVOI_ERE_OTP_SMS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_user'] = isset($data['id_user']) ? $data['id_user'] : null;
        $this->container['mode_envoi'] = isset($data['mode_envoi']) ? $data['mode_envoi'] : null;
        $this->container['adress'] = isset($data['adress']) ? $data['adress'] : null;
        $this->container['date_envoi'] = isset($data['date_envoi']) ? $data['date_envoi'] : null;
        $this->container['designation'] = isset($data['designation']) ? $data['designation'] : null;
        $this->container['anonymize'] = isset($data['anonymize']) ? $data['anonymize'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getModeEnvoiAllowableValues();
        if (!is_null($this->container['mode_envoi']) && !in_array($this->container['mode_envoi'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mode_envoi', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_user
     *
     * @return int
     */
    public function getIdUser()
    {
        return $this->container['id_user'];
    }

    /**
     * Sets id_user
     *
     * @param int $id_user user ID de l'utilisateur qui envoi le courrier
     *
     * @return $this
     */
    public function setIdUser($id_user)
    {
        $this->container['id_user'] = $id_user;

        return $this;
    }

    /**
     * Gets mode_envoi
     *
     * @return string
     */
    public function getModeEnvoi()
    {
        return $this->container['mode_envoi'];
    }

    /**
     * Sets mode_envoi
     *
     * @param string $mode_envoi Mode d'envoi du courrier : suivi, lrar, lrare, ou normal pour les envois papier. ere_otp_mail ou ere_otp_sms pour les recommandés électroniques.
     *
     * @return $this
     */
    public function setModeEnvoi($mode_envoi)
    {
        $allowedValues = $this->getModeEnvoiAllowableValues();
        if (!is_null($mode_envoi) && !in_array($mode_envoi, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mode_envoi', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode_envoi'] = $mode_envoi;

        return $this;
    }

    /**
     * Gets adress
     *
     * @return \MerciFacteurApi\Client\Model\AdressSendCourrier
     */
    public function getAdress()
    {
        return $this->container['adress'];
    }

    /**
     * Sets adress
     *
     * @param \MerciFacteurApi\Client\Model\AdressSendCourrier $adress adress
     *
     * @return $this
     */
    public function setAdress($adress)
    {
        $this->container['adress'] = $adress;

        return $this;
    }

    /**
     * Gets date_envoi
     *
     * @return string
     */
    public function getDateEnvoi()
    {
        return $this->container['date_envoi'];
    }

    /**
     * Sets date_envoi
     *
     * @param string $date_envoi Date d'envoi souhaitée du courrier. Si vide ou non spécifié, l'envoi sera fait le jour même (ou le jour ouvrable suivant). Doit être au format AAAA-MM-JJ et doit être une date non passée.
     *
     * @return $this
     */
    public function setDateEnvoi($date_envoi)
    {
        $this->container['date_envoi'] = $date_envoi;

        return $this;
    }

    /**
     * Gets designation
     *
     * @return string
     */
    public function getDesignation()
    {
        return $this->container['designation'];
    }

    /**
     * Sets designation
     *
     * @param string $designation Facultatif, 50 caractères maximum, la designation sera reprise sur votre interface Merci facteur pro dans le listing de vos courriers afin de faciliter vos recherches. Pour les envois recommandés élécroniques (ERE) la designation sera présente dans l'email envoyé à votre destinataire
     *
     * @return $this
     */
    public function setDesignation($designation)
    {
        $this->container['designation'] = $designation;

        return $this;
    }

    /**
     * Gets anonymize
     *
     * @return \MerciFacteurApi\Client\Model\SendCourrierAnonymize
     */
    public function getAnonymize()
    {
        return $this->container['anonymize'];
    }

    /**
     * Sets anonymize
     *
     * @param \MerciFacteurApi\Client\Model\SendCourrierAnonymize $anonymize anonymize
     *
     * @return $this
     */
    public function setAnonymize($anonymize)
    {
        $this->container['anonymize'] = $anonymize;

        return $this;
    }

    /**
     * Gets content
     *
     * @return \MerciFacteurApi\Client\Model\SendCourrierContent
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param \MerciFacteurApi\Client\Model\SendCourrierContent $content content
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

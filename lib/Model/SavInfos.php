<?php

/**
 * SavInfos
 *
 * PHP version 5
 *
 * @category Class
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merci facteur API
 *
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MerciFacteurApi\Client\Model;

use \ArrayAccess;
use \MerciFacteurApi\Client\ObjectSerializer;

/**
 * SavInfos Class Doc Comment
 *
 * @category Class
 * @description Les informations nécessaires à l&#x27;ouverture d&#x27;un ticket auprès du service après vente de Merci facteur
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SavInfos implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'SavInfos';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'your_service_name' => 'string',
        'email' => 'string',
        'reference_courrier' => 'string',
        'sujet' => 'string',
        'message_texte' => 'string'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'your_service_name' => null,
        'email' => null,
        'reference_courrier' => null,
        'sujet' => null,
        'message_texte' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'your_service_name' => 'yourServiceName',
        'email' => 'email',
        'reference_courrier' => 'referenceCourrier',
        'sujet' => 'sujet',
        'message_texte' => 'messageTexte'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'your_service_name' => 'setYourServiceName',
        'email' => 'setEmail',
        'reference_courrier' => 'setReferenceCourrier',
        'sujet' => 'setSujet',
        'message_texte' => 'setMessageTexte'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'your_service_name' => 'getYourServiceName',
        'email' => 'getEmail',
        'reference_courrier' => 'getReferenceCourrier',
        'sujet' => 'getSujet',
        'message_texte' => 'getMessageTexte'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['your_service_name'] = isset($data['your_service_name']) ? $data['your_service_name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['reference_courrier'] = isset($data['reference_courrier']) ? $data['reference_courrier'] : null;
        $this->container['sujet'] = isset($data['sujet']) ? $data['sujet'] : null;
        $this->container['message_texte'] = isset($data['message_texte']) ? $data['message_texte'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['your_service_name'] === null) {
            $invalidProperties[] = "'your_service_name' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['sujet'] === null) {
            $invalidProperties[] = "'sujet' can't be null";
        }
        if ($this->container['message_texte'] === null) {
            $invalidProperties[] = "'message_texte' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets your_service_name
     *
     * @return string
     */
    public function getYourServiceName()
    {
        return $this->container['your_service_name'];
    }

    /**
     * Sets your_service_name
     *
     * @param string $your_service_name Nom de votre service, tel qu'il est connu par la personne qui ouvre le ticket SAV (le SAV de Merci facteur se présentera comme traitant la demande pour vous).
     *
     * @return $this
     */
    public function setYourServiceName($your_service_name)
    {
        $this->container['your_service_name'] = $your_service_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Adresse email de la personne qui ouvre ce ticket SAV (les réponses du SAV seront envoyées sur cette adresse)
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets reference_courrier
     *
     * @return string
     */
    public function getReferenceCourrier()
    {
        return $this->container['reference_courrier'];
    }

    /**
     * Sets reference_courrier
     *
     * @param string $reference_courrier Si connue, la référence du courrier concerné par ce ticet SAV.
     *
     * @return $this
     */
    public function setReferenceCourrier($reference_courrier)
    {
        $this->container['reference_courrier'] = $reference_courrier;

        return $this;
    }

    /**
     * Gets sujet
     *
     * @return string
     */
    public function getSujet()
    {
        return $this->container['sujet'];
    }

    /**
     * Sets sujet
     *
     * @param string $sujet Sujet de la demande.
     *
     * @return $this
     */
    public function setSujet($sujet)
    {
        $this->container['sujet'] = $sujet;

        return $this;
    }

    /**
     * Gets message_texte
     *
     * @return string
     */
    public function getMessageTexte()
    {
        return $this->container['message_texte'];
    }

    /**
     * Sets message_texte
     *
     * @param string $message_texte Texte de la demande.
     *
     * @return $this
     */
    public function setMessageTexte($message_texte)
    {
        $this->container['message_texte'] = $message_texte;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

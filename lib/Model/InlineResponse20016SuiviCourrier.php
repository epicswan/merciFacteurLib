<?php

/**
 * InlineResponse20016SuiviCourrier
 *
 * PHP version 5
 *
 * @category Class
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merci facteur API
 *
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MerciFacteurApi\Client\Model;

use \ArrayAccess;
use \MerciFacteurApi\Client\ObjectSerializer;

/**
 * InlineResponse20016SuiviCourrier Class Doc Comment
 *
 * @category Class
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20016SuiviCourrier implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'inline_response_200_16_suiviCourrier';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'dest' => 'string',
        'ref_courrier' => 'string',
        'ref_tracking' => 'string',
        'mode_envoi' => 'string',
        'last_state' => 'string',
        'historique' => 'string',
        'pnd' => 'string',
        'are_base64_jpeg' => 'string'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'dest' => null,
        'ref_courrier' => null,
        'ref_tracking' => null,
        'mode_envoi' => null,
        'last_state' => null,
        'historique' => null,
        'pnd' => null,
        'are_base64_jpeg' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dest' => 'dest',
        'ref_courrier' => 'refCourrier',
        'ref_tracking' => 'refTracking',
        'mode_envoi' => 'modeEnvoi',
        'last_state' => 'lastState',
        'historique' => 'historique',
        'pnd' => 'pnd',
        'are_base64_jpeg' => 'are_base64_jpeg'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dest' => 'setDest',
        'ref_courrier' => 'setRefCourrier',
        'ref_tracking' => 'setRefTracking',
        'mode_envoi' => 'setModeEnvoi',
        'last_state' => 'setLastState',
        'historique' => 'setHistorique',
        'pnd' => 'setPnd',
        'are_base64_jpeg' => 'setAreBase64Jpeg'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dest' => 'getDest',
        'ref_courrier' => 'getRefCourrier',
        'ref_tracking' => 'getRefTracking',
        'mode_envoi' => 'getModeEnvoi',
        'last_state' => 'getLastState',
        'historique' => 'getHistorique',
        'pnd' => 'getPnd',
        'are_base64_jpeg' => 'getAreBase64Jpeg'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dest'] = isset($data['dest']) ? $data['dest'] : null;
        $this->container['ref_courrier'] = isset($data['ref_courrier']) ? $data['ref_courrier'] : null;
        $this->container['ref_tracking'] = isset($data['ref_tracking']) ? $data['ref_tracking'] : null;
        $this->container['mode_envoi'] = isset($data['mode_envoi']) ? $data['mode_envoi'] : null;
        $this->container['last_state'] = isset($data['last_state']) ? $data['last_state'] : null;
        $this->container['historique'] = isset($data['historique']) ? $data['historique'] : null;
        $this->container['pnd'] = isset($data['pnd']) ? $data['pnd'] : null;
        $this->container['are_base64_jpeg'] = isset($data['are_base64_jpeg']) ? $data['are_base64_jpeg'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dest
     *
     * @return string
     */
    public function getDest()
    {
        return $this->container['dest'];
    }

    /**
     * Sets dest
     *
     * @param string $dest Nom et/ou société du destinataire
     *
     * @return $this
     */
    public function setDest($dest)
    {
        $this->container['dest'] = $dest;

        return $this;
    }

    /**
     * Gets ref_courrier
     *
     * @return string
     */
    public function getRefCourrier()
    {
        return $this->container['ref_courrier'];
    }

    /**
     * Sets ref_courrier
     *
     * @param string $ref_courrier Référence Merci facteur du courrier
     *
     * @return $this
     */
    public function setRefCourrier($ref_courrier)
    {
        $this->container['ref_courrier'] = $ref_courrier;

        return $this;
    }

    /**
     * Gets ref_tracking
     *
     * @return string
     */
    public function getRefTracking()
    {
        return $this->container['ref_tracking'];
    }

    /**
     * Sets ref_tracking
     *
     * @param string $ref_tracking Référence de suivi postal
     *
     * @return $this
     */
    public function setRefTracking($ref_tracking)
    {
        $this->container['ref_tracking'] = $ref_tracking;

        return $this;
    }

    /**
     * Gets mode_envoi
     *
     * @return string
     */
    public function getModeEnvoi()
    {
        return $this->container['mode_envoi'];
    }

    /**
     * Sets mode_envoi
     *
     * @param string $mode_envoi Mode d'envoi du courrier (lrar, lrare, suivi ou normal)
     *
     * @return $this
     */
    public function setModeEnvoi($mode_envoi)
    {
        $this->container['mode_envoi'] = $mode_envoi;

        return $this;
    }

    /**
     * Gets last_state
     *
     * @return string
     */
    public function getLastState()
    {
        return $this->container['last_state'];
    }

    /**
     * Sets last_state
     *
     * @param string $last_state Dernier état connu de l'acheminement
     *
     * @return $this
     */
    public function setLastState($last_state)
    {
        $this->container['last_state'] = $last_state;

        return $this;
    }

    /**
     * Gets historique
     *
     * @return string
     */
    public function getHistorique()
    {
        return $this->container['historique'];
    }

    /**
     * Sets historique
     *
     * @param string $historique Historique complet de l'acheminement
     *
     * @return $this
     */
    public function setHistorique($historique)
    {
        $this->container['historique'] = $historique;

        return $this;
    }

    /**
     * Gets pnd
     *
     * @return string
     */
    public function getPnd()
    {
        return $this->container['pnd'];
    }

    /**
     * Sets pnd
     *
     * @param string $pnd 1 en cas de pli non distribuable, sinon 0. Est égale à null si le courrier n'a pas de suivi.
     *
     * @return $this
     */
    public function setPnd($pnd)
    {
        $this->container['pnd'] = $pnd;

        return $this;
    }

    /**
     * Gets are_base64_jpeg
     *
     * @return string
     */
    public function getAreBase64Jpeg()
    {
        return $this->container['are_base64_jpeg'];
    }

    /**
     * Sets are_base64_jpeg
     *
     * @param string $are_base64_jpeg Si vous avez envyé ce courrier en lrare, \"pending\" si l'accusé de réception n'est pas encore disponible, ou la base64 de l'AR numérisé (format jpeg) si il est disponible. Est égale à null le mode d'envoi du courrier n'est pas lrare.
     *
     * @return $this
     */
    public function setAreBase64Jpeg($are_base64_jpeg)
    {
        $this->container['are_base64_jpeg'] = $are_base64_jpeg;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

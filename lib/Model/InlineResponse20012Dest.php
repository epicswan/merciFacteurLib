<?php

/**
 * InlineResponse20012Dest
 *
 * PHP version 5
 *
 * @category Class
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merci facteur API
 *
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MerciFacteurApi\Client\Model;

use \ArrayAccess;
use \MerciFacteurApi\Client\ObjectSerializer;

/**
 * InlineResponse20012Dest Class Doc Comment
 *
 * @category Class
 * @description Infos du destinataire du courrier
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20012Dest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'inline_response_200_12_dest';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'id' => 'int',
        'civilite' => 'string',
        'nom' => 'string',
        'prenom' => 'string',
        'societe' => 'string',
        'adresse1' => 'string',
        'adresse2' => 'string',
        'adresse3' => 'string',
        'cp' => 'string',
        'ville' => 'string',
        'pays' => 'string'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'id' => null,
        'civilite' => null,
        'nom' => null,
        'prenom' => null,
        'societe' => null,
        'adresse1' => null,
        'adresse2' => null,
        'adresse3' => null,
        'cp' => null,
        'ville' => null,
        'pays' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'civilite' => 'civilite',
        'nom' => 'nom',
        'prenom' => 'prenom',
        'societe' => 'societe',
        'adresse1' => 'adresse1',
        'adresse2' => 'adresse2',
        'adresse3' => 'adresse3',
        'cp' => 'cp',
        'ville' => 'ville',
        'pays' => 'pays'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'civilite' => 'setCivilite',
        'nom' => 'setNom',
        'prenom' => 'setPrenom',
        'societe' => 'setSociete',
        'adresse1' => 'setAdresse1',
        'adresse2' => 'setAdresse2',
        'adresse3' => 'setAdresse3',
        'cp' => 'setCp',
        'ville' => 'setVille',
        'pays' => 'setPays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'civilite' => 'getCivilite',
        'nom' => 'getNom',
        'prenom' => 'getPrenom',
        'societe' => 'getSociete',
        'adresse1' => 'getAdresse1',
        'adresse2' => 'getAdresse2',
        'adresse3' => 'getAdresse3',
        'cp' => 'getCp',
        'ville' => 'getVille',
        'pays' => 'getPays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['civilite'] = isset($data['civilite']) ? $data['civilite'] : null;
        $this->container['nom'] = isset($data['nom']) ? $data['nom'] : null;
        $this->container['prenom'] = isset($data['prenom']) ? $data['prenom'] : null;
        $this->container['societe'] = isset($data['societe']) ? $data['societe'] : null;
        $this->container['adresse1'] = isset($data['adresse1']) ? $data['adresse1'] : null;
        $this->container['adresse2'] = isset($data['adresse2']) ? $data['adresse2'] : null;
        $this->container['adresse3'] = isset($data['adresse3']) ? $data['adresse3'] : null;
        $this->container['cp'] = isset($data['cp']) ? $data['cp'] : null;
        $this->container['ville'] = isset($data['ville']) ? $data['ville'] : null;
        $this->container['pays'] = isset($data['pays']) ? $data['pays'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Adress ID e ce destinataire
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets civilite
     *
     * @return string
     */
    public function getCivilite()
    {
        return $this->container['civilite'];
    }

    /**
     * Sets civilite
     *
     * @param string $civilite Civilité de ce destinataire
     *
     * @return $this
     */
    public function setCivilite($civilite)
    {
        $this->container['civilite'] = $civilite;

        return $this;
    }

    /**
     * Gets nom
     *
     * @return string
     */
    public function getNom()
    {
        return $this->container['nom'];
    }

    /**
     * Sets nom
     *
     * @param string $nom Nom de ce destinataire
     *
     * @return $this
     */
    public function setNom($nom)
    {
        $this->container['nom'] = $nom;

        return $this;
    }

    /**
     * Gets prenom
     *
     * @return string
     */
    public function getPrenom()
    {
        return $this->container['prenom'];
    }

    /**
     * Sets prenom
     *
     * @param string $prenom Prénom de ce destinataire
     *
     * @return $this
     */
    public function setPrenom($prenom)
    {
        $this->container['prenom'] = $prenom;

        return $this;
    }

    /**
     * Gets societe
     *
     * @return string
     */
    public function getSociete()
    {
        return $this->container['societe'];
    }

    /**
     * Sets societe
     *
     * @param string $societe Société de ce destinataire
     *
     * @return $this
     */
    public function setSociete($societe)
    {
        $this->container['societe'] = $societe;

        return $this;
    }

    /**
     * Gets adresse1
     *
     * @return string
     */
    public function getAdresse1()
    {
        return $this->container['adresse1'];
    }

    /**
     * Sets adresse1
     *
     * @param string $adresse1 Ligne 1 d'adresse de ce destinataire
     *
     * @return $this
     */
    public function setAdresse1($adresse1)
    {
        $this->container['adresse1'] = $adresse1;

        return $this;
    }

    /**
     * Gets adresse2
     *
     * @return string
     */
    public function getAdresse2()
    {
        return $this->container['adresse2'];
    }

    /**
     * Sets adresse2
     *
     * @param string $adresse2 Ligne 2 d'adresse de ce destinataire
     *
     * @return $this
     */
    public function setAdresse2($adresse2)
    {
        $this->container['adresse2'] = $adresse2;

        return $this;
    }

    /**
     * Gets adresse3
     *
     * @return string
     */
    public function getAdresse3()
    {
        return $this->container['adresse3'];
    }

    /**
     * Sets adresse3
     *
     * @param string $adresse3 Ligne 3 d'adresse de ce destinataire
     *
     * @return $this
     */
    public function setAdresse3($adresse3)
    {
        $this->container['adresse3'] = $adresse3;

        return $this;
    }

    /**
     * Gets cp
     *
     * @return string
     */
    public function getCp()
    {
        return $this->container['cp'];
    }

    /**
     * Sets cp
     *
     * @param string $cp Code postal de ce destinataire
     *
     * @return $this
     */
    public function setCp($cp)
    {
        $this->container['cp'] = $cp;

        return $this;
    }

    /**
     * Gets ville
     *
     * @return string
     */
    public function getVille()
    {
        return $this->container['ville'];
    }

    /**
     * Sets ville
     *
     * @param string $ville Ville de ce destinataire
     *
     * @return $this
     */
    public function setVille($ville)
    {
        $this->container['ville'] = $ville;

        return $this;
    }

    /**
     * Gets pays
     *
     * @return string
     */
    public function getPays()
    {
        return $this->container['pays'];
    }

    /**
     * Sets pays
     *
     * @param string $pays Pays de ce destinataire
     *
     * @return $this
     */
    public function setPays($pays)
    {
        $this->container['pays'] = $pays;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

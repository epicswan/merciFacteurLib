<?php

/**
 * InlineResponse20012General
 *
 * PHP version 5
 *
 * @category Class
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merci facteur API
 *
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MerciFacteurApi\Client\Model;

use \ArrayAccess;
use \MerciFacteurApi\Client\ObjectSerializer;

/**
 * InlineResponse20012General Class Doc Comment
 *
 * @category Class
 * @description Informations générales des courriers de cet envoi
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20012General implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'inline_response_200_12_general';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'id_envoi' => 'int',
        'statut' => 'string',
        'nb_page' => 'int',
        'nb_dest' => 'int',
        'mode_envoi' => 'string',
        'date' => 'int',
        'id_exp' => 'int',
        'id_dest' => 'int[]',
        'amount' => '\MerciFacteurApi\Client\Model\InlineResponse20011Amount[]'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'id_envoi' => null,
        'statut' => null,
        'nb_page' => null,
        'nb_dest' => null,
        'mode_envoi' => null,
        'date' => null,
        'id_exp' => null,
        'id_dest' => null,
        'amount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_envoi' => 'idEnvoi',
        'statut' => 'statut',
        'nb_page' => 'nbPage',
        'nb_dest' => 'nbDest',
        'mode_envoi' => 'modeEnvoi',
        'date' => 'date',
        'id_exp' => 'idExp',
        'id_dest' => 'idDest',
        'amount' => 'amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_envoi' => 'setIdEnvoi',
        'statut' => 'setStatut',
        'nb_page' => 'setNbPage',
        'nb_dest' => 'setNbDest',
        'mode_envoi' => 'setModeEnvoi',
        'date' => 'setDate',
        'id_exp' => 'setIdExp',
        'id_dest' => 'setIdDest',
        'amount' => 'setAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_envoi' => 'getIdEnvoi',
        'statut' => 'getStatut',
        'nb_page' => 'getNbPage',
        'nb_dest' => 'getNbDest',
        'mode_envoi' => 'getModeEnvoi',
        'date' => 'getDate',
        'id_exp' => 'getIdExp',
        'id_dest' => 'getIdDest',
        'amount' => 'getAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_envoi'] = isset($data['id_envoi']) ? $data['id_envoi'] : null;
        $this->container['statut'] = isset($data['statut']) ? $data['statut'] : null;
        $this->container['nb_page'] = isset($data['nb_page']) ? $data['nb_page'] : null;
        $this->container['nb_dest'] = isset($data['nb_dest']) ? $data['nb_dest'] : null;
        $this->container['mode_envoi'] = isset($data['mode_envoi']) ? $data['mode_envoi'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['id_exp'] = isset($data['id_exp']) ? $data['id_exp'] : null;
        $this->container['id_dest'] = isset($data['id_dest']) ? $data['id_dest'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_envoi
     *
     * @return int
     */
    public function getIdEnvoi()
    {
        return $this->container['id_envoi'];
    }

    /**
     * Sets id_envoi
     *
     * @param int $id_envoi Id de l'envoi
     *
     * @return $this
     */
    public function setIdEnvoi($id_envoi)
    {
        $this->container['id_envoi'] = $id_envoi;

        return $this;
    }

    /**
     * Gets statut
     *
     * @return string
     */
    public function getStatut()
    {
        return $this->container['statut'];
    }

    /**
     * Sets statut
     *
     * @param string $statut Statut de l'envoi
     *
     * @return $this
     */
    public function setStatut($statut)
    {
        $this->container['statut'] = $statut;

        return $this;
    }

    /**
     * Gets nb_page
     *
     * @return int
     */
    public function getNbPage()
    {
        return $this->container['nb_page'];
    }

    /**
     * Sets nb_page
     *
     * @param int $nb_page Nb page de chaque courrier de l'envoi
     *
     * @return $this
     */
    public function setNbPage($nb_page)
    {
        $this->container['nb_page'] = $nb_page;

        return $this;
    }

    /**
     * Gets nb_dest
     *
     * @return int
     */
    public function getNbDest()
    {
        return $this->container['nb_dest'];
    }

    /**
     * Sets nb_dest
     *
     * @param int $nb_dest Nombre de destinataires de l'envoi (=nombre de courriers)
     *
     * @return $this
     */
    public function setNbDest($nb_dest)
    {
        $this->container['nb_dest'] = $nb_dest;

        return $this;
    }

    /**
     * Gets mode_envoi
     *
     * @return string
     */
    public function getModeEnvoi()
    {
        return $this->container['mode_envoi'];
    }

    /**
     * Sets mode_envoi
     *
     * @param string $mode_envoi Mode d'envoi (lrar, lrare, suivi, normal)
     *
     * @return $this
     */
    public function setModeEnvoi($mode_envoi)
    {
        $this->container['mode_envoi'] = $mode_envoi;

        return $this;
    }

    /**
     * Gets date
     *
     * @return int
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param int $date Date de l'envoi au format timestamp
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets id_exp
     *
     * @return int
     */
    public function getIdExp()
    {
        return $this->container['id_exp'];
    }

    /**
     * Sets id_exp
     *
     * @param int $id_exp adresse Id de l'adresse d'expéditeur
     *
     * @return $this
     */
    public function setIdExp($id_exp)
    {
        $this->container['id_exp'] = $id_exp;

        return $this;
    }

    /**
     * Gets id_dest
     *
     * @return int[]
     */
    public function getIdDest()
    {
        return $this->container['id_dest'];
    }

    /**
     * Sets id_dest
     *
     * @param int[] $id_dest adresse Id de/des l'adresse(s) de destinataire(s)
     *
     * @return $this
     */
    public function setIdDest($id_dest)
    {
        $this->container['id_dest'] = $id_dest;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \MerciFacteurApi\Client\Model\InlineResponse20011Amount[]
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \MerciFacteurApi\Client\Model\InlineResponse20011Amount[] $amount Résumé du montant facturé par Merci facteur
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

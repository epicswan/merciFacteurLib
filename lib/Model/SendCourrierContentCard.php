<?php
/**
 * SendCourrierContentCard
 *
 * PHP version 5
 *
 * @category Class
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merci facteur API
 *
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MerciFacteurApi\Client\Model;

use \ArrayAccess;
use \MerciFacteurApi\Client\ObjectSerializer;

/**
 * SendCourrierContentCard Class Doc Comment
 *
 * @category Class
 * @description Définition du contenu de la carte, envoyer une chaine vide si pas de carte dans ce courrier (&#x3D;&#x27;&#x27;)
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SendCourrierContentCard implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sendCourrier_content_card';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'format' => 'string',
        'visuel' => '\MerciFacteurApi\Client\Model\SendCourrierContentCardVisuel',
        'text' => '\MerciFacteurApi\Client\Model\SendCourrierContentCardText',
        'coin' => 'string',
        'papier' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'format' => null,
        'visuel' => null,
        'text' => null,
        'coin' => null,
        'papier' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'format' => 'format',
        'visuel' => 'visuel',
        'text' => 'text',
        'coin' => 'coin',
        'papier' => 'papier'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'format' => 'setFormat',
        'visuel' => 'setVisuel',
        'text' => 'setText',
        'coin' => 'setCoin',
        'papier' => 'setPapier'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'format' => 'getFormat',
        'visuel' => 'getVisuel',
        'text' => 'getText',
        'coin' => 'getCoin',
        'papier' => 'getPapier'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FORMAT_POSTCARD = 'postcard';
    const FORMAT_NAKED_POSTCARD = 'naked-postcard';
    const FORMAT_CLASSIC = 'classic';
    const FORMAT_FOLDED = 'folded';
    const FORMAT_LARGE = 'large';
    const FORMAT_LARGE_A4 = 'large-a4';
    const COIN_ARRONDI = 'arrondi';
    const COIN_CARRE = 'carre';
    const PAPIER_CLASSIC = 'classic';
    const PAPIER_NACRE = 'nacre';
    const PAPIER_CREATION = 'creation';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFormatAllowableValues()
    {
        return [
            self::FORMAT_POSTCARD,
            self::FORMAT_NAKED_POSTCARD,
            self::FORMAT_CLASSIC,
            self::FORMAT_FOLDED,
            self::FORMAT_LARGE,
            self::FORMAT_LARGE_A4,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCoinAllowableValues()
    {
        return [
            self::COIN_ARRONDI,
            self::COIN_CARRE,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPapierAllowableValues()
    {
        return [
            self::PAPIER_CLASSIC
            self::PAPIER_NACRE
            self::PAPIER_CREATION
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['format'] = isset($data['format']) ? $data['format'] : null;
        $this->container['visuel'] = isset($data['visuel']) ? $data['visuel'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['coin'] = isset($data['coin']) ? $data['coin'] : null;
        $this->container['papier'] = isset($data['papier']) ? $data['papier'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFormatAllowableValues();
        if (!is_null($this->container['format']) && !in_array($this->container['format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'format', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCoinAllowableValues();
        if (!is_null($this->container['coin']) && !in_array($this->container['coin'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'coin', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPapierAllowableValues();
        if (!is_null($this->container['papier']) && !in_array($this->container['papier'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'papier', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets format
     *
     * @return string
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string $format Format de la carte : postcard, naked-postcard, classic, folded, large, large-a4
     *
     * @return $this
     */
    public function setFormat($format)
    {
        $allowedValues = $this->getFormatAllowableValues();
        if (!is_null($format) && !in_array($format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'format', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets visuel
     *
     * @return \MerciFacteurApi\Client\Model\SendCourrierContentCardVisuel
     */
    public function getVisuel()
    {
        return $this->container['visuel'];
    }

    /**
     * Sets visuel
     *
     * @param \MerciFacteurApi\Client\Model\SendCourrierContentCardVisuel $visuel visuel
     *
     * @return $this
     */
    public function setVisuel($visuel)
    {
        $this->container['visuel'] = $visuel;

        return $this;
    }

    /**
     * Gets text
     *
     * @return \MerciFacteurApi\Client\Model\SendCourrierContentCardText
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param \MerciFacteurApi\Client\Model\SendCourrierContentCardText $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets coin
     *
     * @return string
     */
    public function getCoin()
    {
        return $this->container['coin'];
    }

    /**
     * Sets coin
     *
     * @param string $coin Type de coins de la carte (arrondi ou carre)
     *
     * @return $this
     */
    public function setCoin($coin)
    {
        $allowedValues = $this->getCoinAllowableValues();
        if (!is_null($coin) && !in_array($coin, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'coin', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['coin'] = $coin;

        return $this;
    }

    /**
     * Gets papier
     *
     * @return string
     */
    public function getPapier()
    {
        return $this->container['papier'];
    }

    /**
     * Sets papier
     *
     * @param string $papier Type de papier de la carte (classic, nacre ou creation)
     *
     * @return $this
     */
    public function setPapier($papier)
    {
        $allowedValues = $this->getPapierAllowableValues();
        if (!is_null($papier) && !in_array($papier, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'papier', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['papier'] = $papier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

<?php

/**
 * InlineResponse20020ListErrors
 *
 * PHP version 5
 *
 * @category Class
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merci facteur API
 *
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MerciFacteurApi\Client\Model;

use \ArrayAccess;
use \MerciFacteurApi\Client\ObjectSerializer;

/**
 * InlineResponse20020ListErrors Class Doc Comment
 *
 * @category Class
 * @description Objet contenant la correspondance entre chaque code d&#x27;erreur et sa signification.
 * @package  MerciFacteurApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20020ListErrors implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'inline_response_200_20_listErrors';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'error_code_1' => 'string',
        'error_code_2' => 'string',
        'error_code_3' => 'string',
        'etc' => 'string'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'error_code_1' => null,
        'error_code_2' => null,
        'error_code_3' => null,
        'etc' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'error_code_1' => 'ERROR_CODE_1',
        'error_code_2' => 'ERROR_CODE_2',
        'error_code_3' => 'ERROR_CODE_3',
        'etc' => 'ETC'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'error_code_1' => 'setErrorCode1',
        'error_code_2' => 'setErrorCode2',
        'error_code_3' => 'setErrorCode3',
        'etc' => 'setEtc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'error_code_1' => 'getErrorCode1',
        'error_code_2' => 'getErrorCode2',
        'error_code_3' => 'getErrorCode3',
        'etc' => 'getEtc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['error_code_1'] = isset($data['error_code_1']) ? $data['error_code_1'] : null;
        $this->container['error_code_2'] = isset($data['error_code_2']) ? $data['error_code_2'] : null;
        $this->container['error_code_3'] = isset($data['error_code_3']) ? $data['error_code_3'] : null;
        $this->container['etc'] = isset($data['etc']) ? $data['etc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets error_code_1
     *
     * @return string
     */
    public function getErrorCode1()
    {
        return $this->container['error_code_1'];
    }

    /**
     * Sets error_code_1
     *
     * @param string $error_code_1 Sigification de ce code d'erreur
     *
     * @return $this
     */
    public function setErrorCode1($error_code_1)
    {
        $this->container['error_code_1'] = $error_code_1;

        return $this;
    }

    /**
     * Gets error_code_2
     *
     * @return string
     */
    public function getErrorCode2()
    {
        return $this->container['error_code_2'];
    }

    /**
     * Sets error_code_2
     *
     * @param string $error_code_2 Sigification de ce code d'erreur
     *
     * @return $this
     */
    public function setErrorCode2($error_code_2)
    {
        $this->container['error_code_2'] = $error_code_2;

        return $this;
    }

    /**
     * Gets error_code_3
     *
     * @return string
     */
    public function getErrorCode3()
    {
        return $this->container['error_code_3'];
    }

    /**
     * Sets error_code_3
     *
     * @param string $error_code_3 Sigification de ce code d'erreur
     *
     * @return $this
     */
    public function setErrorCode3($error_code_3)
    {
        $this->container['error_code_3'] = $error_code_3;

        return $this;
    }

    /**
     * Gets etc
     *
     * @return string
     */
    public function getEtc()
    {
        return $this->container['etc'];
    }

    /**
     * Sets etc
     *
     * @param string $etc etc.
     *
     * @return $this
     */
    public function setEtc($etc)
    {
        $this->container['etc'] = $etc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerciFacteurApi);
  }
}(this, function(expect, MerciFacteurApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerciFacteurApi.CourrierApi();
  });

  describe('(package)', function() {
    describe('CourrierApi', function() {
      describe('deleteEnvoi', function() {
        it('should call deleteEnvoi successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteEnvoi call and complete the assertions
          /*

          instance.deleteEnvoi(wwServiceId, wwAccessToken, idEnvoi, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MerciFacteurApi.InlineResponse2002);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEnvoi', function() {
        it('should call getEnvoi successfully', function(done) {
          // TODO: uncomment, update parameter values for getEnvoi call and complete the assertions
          /*

          instance.getEnvoi(wwServiceId, wwAccessToken, idEnvoi, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MerciFacteurApi.InlineResponse20012);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPostagePrice', function() {
        it('should call getPostagePrice successfully', function(done) {
          // TODO: uncomment, update parameter values for getPostagePrice call and complete the assertions
          /*
          var opts = {};

          instance.getPostagePrice(wwServiceId, wwAccessToken, modeEnvoi, cardFormat, cardPapier, cardCoin, letterPageNumber, photoNumber, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MerciFacteurApi.InlineResponse20010);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProof', function() {
        it('should call getProof successfully', function(done) {
          // TODO: uncomment, update parameter values for getProof call and complete the assertions
          /*

          instance.getProof(wwServiceId, wwAccessToken, trackingNumber, document, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MerciFacteurApi.InlineResponse20017);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSuiviEnvoi', function() {
        it('should call getSuiviEnvoi successfully', function(done) {
          // TODO: uncomment, update parameter values for getSuiviEnvoi call and complete the assertions
          /*

          instance.getSuiviEnvoi(wwServiceId, wwAccessToken, idEnvoi, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MerciFacteurApi.InlineResponse20016);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listEnvois', function() {
        it('should call listEnvois successfully', function(done) {
          // TODO: uncomment, update parameter values for listEnvois call and complete the assertions
          /*

          instance.listEnvois(wwServiceId, wwAccessToken, idUser, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MerciFacteurApi.InlineResponse20011);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sendCourrier', function() {
        it('should call sendCourrier successfully', function(done) {
          // TODO: uncomment, update parameter values for sendCourrier call and complete the assertions
          /*

          instance.sendCourrier(idUser, modeEnvoi, adress, dateEnvoi, designation, anonymize, content, wwServiceId, wwAccessToken, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MerciFacteurApi.InlineResponse2009);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadFile', function() {
        it('should call uploadFile successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadFile call and complete the assertions
          /*

          instance.uploadFile(idUser, token, product, type, file, wwServiceId, wwAccessToken, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MerciFacteurApi.InlineResponse2008);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));

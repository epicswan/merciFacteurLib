/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {SendCourrierContentCardText} from './SendCourrierContentCardText';
import {SendCourrierContentCardVisuel} from './SendCourrierContentCardVisuel';

/**
 * The SendCourrierContentCard model module.
 * @module model/SendCourrierContentCard
 * @version 1.2.7
 */
export class SendCourrierContentCard {
  /**
   * Constructs a new <code>SendCourrierContentCard</code>.
   * Définition du contenu de la carte, envoyer une chaine vide si pas de carte dans ce courrier (&#x3D;&#x27;&#x27;)
   * @alias module:model/SendCourrierContentCard
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>SendCourrierContentCard</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SendCourrierContentCard} obj Optional instance to populate.
   * @return {module:model/SendCourrierContentCard} The populated <code>SendCourrierContentCard</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new SendCourrierContentCard();
      if (data.hasOwnProperty('format'))
        obj.format = ApiClient.convertToType(data['format'], 'String');
      if (data.hasOwnProperty('visuel'))
        obj.visuel = SendCourrierContentCardVisuel.constructFromObject(data['visuel']);
      if (data.hasOwnProperty('text'))
        obj.text = SendCourrierContentCardText.constructFromObject(data['text']);
      if (data.hasOwnProperty('coin'))
        obj.coin = ApiClient.convertToType(data['coin'], 'String');
      if (data.hasOwnProperty('papier'))
        obj.papier = ApiClient.convertToType(data['papier'], 'String');
    }
    return obj;
  }
}

/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
SendCourrierContentCard.FormatEnum = {
  /**
   * value: "postcard"
   * @const
   */
  postcard: "postcard",

  /**
   * value: "naked-postcard"
   * @const
   */
  nakedPostcard: "naked-postcard",

  /**
   * value: "classic"
   * @const
   */
  classic: "classic",

  /**
   * value: "folded"
   * @const
   */
  folded: "folded",

  /**
   * value: "large"
   * @const
   */
  large: "large",

  /**
   * value: "large-a4"
   * @const
   */
  largeA4: "large-a4"
};
/**
 * Format de la carte : postcard, naked-postcard, classic, folded, large, large-a4
 * @member {module:model/SendCourrierContentCard.FormatEnum} format
 */
SendCourrierContentCard.prototype.format = undefined;

/**
 * @member {module:model/SendCourrierContentCardVisuel} visuel
 */
SendCourrierContentCard.prototype.visuel = undefined;

/**
 * @member {module:model/SendCourrierContentCardText} text
 */
SendCourrierContentCard.prototype.text = undefined;

/**
 * Allowed values for the <code>coin</code> property.
 * @enum {String}
 * @readonly
 */
SendCourrierContentCard.CoinEnum = {
  /**
   * value: "arrondi"
   * @const
   */
  arrondi: "arrondi",

  /**
   * value: "carre"
   * @const
   */
  carre: "carre"
};
/**
 * Type de coins de la carte (arrondi ou carre)
 * @member {module:model/SendCourrierContentCard.CoinEnum} coin
 */
SendCourrierContentCard.prototype.coin = undefined;

/**
 * Allowed values for the <code>papier</code> property.
 * @enum {String}
 * @readonly
 */
SendCourrierContentCard.PapierEnum = {
  /**
   * value: "classic"
   * @const
   */
  classic: "classic",

  /**
   * value: "nacre"
   * @const
   */
  nacre: "nacre",

  /**
   * value: "creation"
   * @const
   */
  creation: "creation"
};
/**
 * Type de papier de la carte (classic, nacre ou creation)
 * @member {module:model/SendCourrierContentCard.PapierEnum} papier
 */
SendCourrierContentCard.prototype.papier = undefined;


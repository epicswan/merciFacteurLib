/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Base64FilesSendCourrier} from './Base64FilesSendCourrier';
import {FilesSendCourrier} from './FilesSendCourrier';

/**
 * The SendCourrierContentPhoto model module.
 * @module model/SendCourrierContentPhoto
 * @version 1.2.7
 */
export class SendCourrierContentPhoto {
  /**
   * Constructs a new <code>SendCourrierContentPhoto</code>.
   * Définition de photos, envoyer une chaine vide si pas de photo dans ce courrier (&#x3D;&#x27;&#x27;)
   * @alias module:model/SendCourrierContentPhoto
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>SendCourrierContentPhoto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SendCourrierContentPhoto} obj Optional instance to populate.
   * @return {module:model/SendCourrierContentPhoto} The populated <code>SendCourrierContentPhoto</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new SendCourrierContentPhoto();
      if (data.hasOwnProperty('files'))
        obj.files = FilesSendCourrier.constructFromObject(data['files']);
      if (data.hasOwnProperty('base64files'))
        obj.base64files = Base64FilesSendCourrier.constructFromObject(data['base64files']);
      if (data.hasOwnProperty('tokenLibrary'))
        obj.tokenLibrary = ApiClient.convertToType(data['tokenLibrary'], 'String');
    }
    return obj;
  }
}

/**
 * @member {module:model/FilesSendCourrier} files
 */
SendCourrierContentPhoto.prototype.files = undefined;

/**
 * @member {module:model/Base64FilesSendCourrier} base64files
 */
SendCourrierContentPhoto.prototype.base64files = undefined;

/**
 * vide, ou token contenant les photos à envoyer (token retourné par /uploadFile)
 * @member {String} tokenLibrary
 */
SendCourrierContentPhoto.prototype.tokenLibrary = undefined;


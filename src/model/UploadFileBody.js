/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The UploadFileBody model module.
 * @module model/UploadFileBody
 * @version 1.2.7
 */
export class UploadFileBody {
  /**
   * Constructs a new <code>UploadFileBody</code>.
   * @alias module:model/UploadFileBody
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>UploadFileBody</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UploadFileBody} obj Optional instance to populate.
   * @return {module:model/UploadFileBody} The populated <code>UploadFileBody</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new UploadFileBody();
      if (data.hasOwnProperty('idUser'))
        obj.idUser = ApiClient.convertToType(data['idUser'], 'Number');
      if (data.hasOwnProperty('token'))
        obj.token = ApiClient.convertToType(data['token'], 'String');
      if (data.hasOwnProperty('product'))
        obj.product = ApiClient.convertToType(data['product'], 'String');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('file'))
        obj.file = ApiClient.convertToType(data['file'], 'String');
    }
    return obj;
  }
}

/**
 * user ID de l'utilisateur qui envoi le courrier
 * @member {Number} idUser
 */
UploadFileBody.prototype.idUser = undefined;

/**
 * Token du groupe de fichiers à envoyer. Laisser vide lors du premier appel, un Token vous sera retourné et vous pourrez l'utiliser pour les fichiers suivants.
 * @member {String} token
 */
UploadFileBody.prototype.token = undefined;

/**
 * Allowed values for the <code>product</code> property.
 * @enum {String}
 * @readonly
 */
UploadFileBody.ProductEnum = {
  /**
   * value: "photo"
   * @const
   */
  photo: "photo"
};
/**
 * produit envoyé (photo).
 * @member {module:model/UploadFileBody.ProductEnum} product
 */
UploadFileBody.prototype.product = undefined;

/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
UploadFileBody.TypeEnum = {
  /**
   * value: "url"
   * @const
   */
  url: "url",

  /**
   * value: "base64"
   * @const
   */
  base64: "base64"
};
/**
 * Type de fichier envoyé (url ou base64).
 * @member {module:model/UploadFileBody.TypeEnum} type
 */
UploadFileBody.prototype.type = undefined;

/**
 * Le fichier à envoyer (une url ou une base64).
 * @member {String} file
 */
UploadFileBody.prototype.file = undefined;


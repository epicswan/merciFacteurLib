/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import { ApiClient } from "../ApiClient";
import { InlineResponse2001 } from "../model/InlineResponse2001";
import { InlineResponse2002 } from "../model/InlineResponse2002";
import { InlineResponse2003 } from "../model/InlineResponse2003";
import { InlineResponse400 } from "../model/InlineResponse400";

/**
 * User service.
 * @module api/UserApi
 * @version 1.2.7
 */
export class UserApi {
  /**
   * Constructs a new UserApi.
   * @alias module:api/UserApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the deleteUser operation.
   * @callback moduleapi/UserApi~deleteUserCallback
   * @param {String} error Error message, if any.
   * @param {module:model/InlineResponse2002} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Supprimer un utilisateur
   * Attention, opération irrémédiable. Cela ne supprimera pas ses adresses, ni ses courriers qui sont conservés sur votre compte Merci facteur Pro
   * @param {String} wwServiceId Votre service Id
   * @param {String} wwAccessToken Un access token valide
   * @param {Number} idUser User ID de l&#x27;utilisateur à supprimer
   * @param {module:api/UserApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  deleteUser(wwServiceId, wwAccessToken, idUser, callback) {
    let postBody = null;
    // verify the required parameter 'wwServiceId' is set
    if (wwServiceId === undefined || wwServiceId === null) {
      throw new Error(
        "Missing the required parameter 'wwServiceId' when calling deleteUser"
      );
    }
    // verify the required parameter 'wwAccessToken' is set
    if (wwAccessToken === undefined || wwAccessToken === null) {
      throw new Error(
        "Missing the required parameter 'wwAccessToken' when calling deleteUser"
      );
    }
    // verify the required parameter 'idUser' is set
    if (idUser === undefined || idUser === null) {
      throw new Error(
        "Missing the required parameter 'idUser' when calling deleteUser"
      );
    }

    let pathParams = {};
    let queryParams = {
      idUser: idUser,
    };
    let headerParams = {
      "ww-service-id": wwServiceId,
      "ww-access-token": wwAccessToken,
      "Access-Control-Allow-Origin": "*",
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = InlineResponse2002;
    console.log("je suis la!");
    return this.apiClient.callApi(
      "/deleteUser",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getUserId operation.
   * @callback moduleapi/UserApi~getUserIdCallback
   * @param {String} error Error message, if any.
   * @param {module:model/InlineResponse2003} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Récupérer le user ID d&#x27;un utilisateur
   * Récupérer le user ID à partir de l&#x27;adresse email. Pour utiliser cette fonction le moins possible, stockez les userId en local.
   * @param {String} wwServiceId Votre service Id
   * @param {String} wwAccessToken Un access token valide
   * @param {String} emailUser Email de l&#x27;utilisateur
   * @param {module:api/UserApi~getUserIdCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  getUserId(wwServiceId, wwAccessToken, emailUser, callback) {
    let postBody = null;
    // verify the required parameter 'wwServiceId' is set
    if (wwServiceId === undefined || wwServiceId === null) {
      throw new Error(
        "Missing the required parameter 'wwServiceId' when calling getUserId"
      );
    }
    // verify the required parameter 'wwAccessToken' is set
    if (wwAccessToken === undefined || wwAccessToken === null) {
      throw new Error(
        "Missing the required parameter 'wwAccessToken' when calling getUserId"
      );
    }
    // verify the required parameter 'emailUser' is set
    if (emailUser === undefined || emailUser === null) {
      throw new Error(
        "Missing the required parameter 'emailUser' when calling getUserId"
      );
    }

    let pathParams = {};
    let queryParams = {
      emailUser: emailUser,
    };
    let headerParams = {
      "ww-service-id": wwServiceId,
      "ww-access-token": wwAccessToken,
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = InlineResponse2003;

    return this.apiClient.callApi(
      "/getUserId",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the setUser operation.
   * @callback moduleapi/UserApi~setUserCallback
   * @param {String} error Error message, if any.
   * @param {module:model/InlineResponse2001} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Créer un nouvel utilisateur
   * Chaque utilisateur aura un carnet d&#x27;adresses et un historique des envois. Vous retrouverez ces utilisateurs dans votre interface Merci facteur Pro. L&#x27;email indiqué doit être unique et vous permettre d&#x27;identifier l&#x27;utilisateur. Nous vous conseillons d&#x27;enregistrer en local les id d&#x27;utilisateurs retournés dans la réonse pour plus de confort d&#x27;utilisation de l&#x27;API.
   * @param {String} emailUser
   * @param {String} firstName
   * @param {String} lastName
   * @param {String} wwServiceId Votre service Id
   * @param {String} wwAccessToken Un access token valide
   * @param {module:api/UserApi~setUserCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  setUser(
    emailUser,
    firstName,
    lastName,
    wwServiceId,
    wwAccessToken,
    callback
  ) {
    console.log("helo");
    let postBody = null;
    // verify the required parameter 'emailUser' is set
    if (emailUser === undefined || emailUser === null) {
      throw new Error(
        "Missing the required parameter 'emailUser' when calling setUser"
      );
    }
    // verify the required parameter 'firstName' is set
    if (firstName === undefined || firstName === null) {
      throw new Error(
        "Missing the required parameter 'firstName' when calling setUser"
      );
    }
    // verify the required parameter 'lastName' is set
    if (lastName === undefined || lastName === null) {
      throw new Error(
        "Missing the required parameter 'lastName' when calling setUser"
      );
    }
    // verify the required parameter 'wwServiceId' is set
    if (wwServiceId === undefined || wwServiceId === null) {
      throw new Error(
        "Missing the required parameter 'wwServiceId' when calling setUser"
      );
    }
    // verify the required parameter 'wwAccessToken' is set
    if (wwAccessToken === undefined || wwAccessToken === null) {
      throw new Error(
        "Missing the required parameter 'wwAccessToken' when calling setUser"
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      "ww-service-id": wwServiceId,
      "ww-access-token": wwAccessToken,
    };
    let formParams = {
      emailUser: emailUser,
      first_name: firstName,
      last_name: lastName,
    };

    let authNames = [];
    let contentTypes = ["application/x-www-form-urlencoded"];
    let accepts = ["application/json"];
    let returnType = InlineResponse2001;

    console.log(formParams);
    console.log(this.apiClient.callApi);
    return this.apiClient.callApi(
      "/setUser",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the updateUser operation.
   * @callback moduleapi/UserApi~updateUserCallback
   * @param {String} error Error message, if any.
   * @param {module:model/InlineResponse2002} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Modifier les informations d&#x27;un utilisateur
   * Attention, toutes les informations doivent être envoyées, même si il n&#x27;y a pas des modifications sur toutes.
   * @param {String} emailUser
   * @param {String} firstName
   * @param {String} lastName
   * @param {String} wwServiceId Votre service Id
   * @param {String} wwAccessToken Un access token valide
   * @param {Number} idUser User ID de l&#x27;utilisateur à modifier
   * @param {module:api/UserApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  updateUser(
    emailUser,
    firstName,
    lastName,
    wwServiceId,
    wwAccessToken,
    idUser,
    callback
  ) {
    let postBody = null;
    // verify the required parameter 'emailUser' is set
    if (emailUser === undefined || emailUser === null) {
      throw new Error(
        "Missing the required parameter 'emailUser' when calling updateUser"
      );
    }
    // verify the required parameter 'firstName' is set
    if (firstName === undefined || firstName === null) {
      throw new Error(
        "Missing the required parameter 'firstName' when calling updateUser"
      );
    }
    // verify the required parameter 'lastName' is set
    if (lastName === undefined || lastName === null) {
      throw new Error(
        "Missing the required parameter 'lastName' when calling updateUser"
      );
    }
    // verify the required parameter 'wwServiceId' is set
    if (wwServiceId === undefined || wwServiceId === null) {
      throw new Error(
        "Missing the required parameter 'wwServiceId' when calling updateUser"
      );
    }
    // verify the required parameter 'wwAccessToken' is set
    if (wwAccessToken === undefined || wwAccessToken === null) {
      throw new Error(
        "Missing the required parameter 'wwAccessToken' when calling updateUser"
      );
    }
    // verify the required parameter 'idUser' is set
    if (idUser === undefined || idUser === null) {
      throw new Error(
        "Missing the required parameter 'idUser' when calling updateUser"
      );
    }

    let pathParams = {};
    let queryParams = {
      idUser: idUser,
    };
    let headerParams = {
      "ww-service-id": wwServiceId,
      "ww-access-token": wwAccessToken,
    };
    let formParams = {
      emailUser: emailUser,
      first_name: firstName,
      last_name: lastName,
    };

    let authNames = [];
    let contentTypes = ["application/x-www-form-urlencoded"];
    let accepts = ["application/json"];
    let returnType = InlineResponse2002;

    return this.apiClient.callApi(
      "/updateUser",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
}

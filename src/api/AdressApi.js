/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import { ApiClient } from "../ApiClient";
import { AdressInfosAdress } from "../model/AdressInfosAdress";
import { InlineResponse2002 } from "../model/InlineResponse2002";
import { InlineResponse2004 } from "../model/InlineResponse2004";
import { InlineResponse2005 } from "../model/InlineResponse2005";
import { InlineResponse2006 } from "../model/InlineResponse2006";
import { InlineResponse2007 } from "../model/InlineResponse2007";
import { InlineResponse400 } from "../model/InlineResponse400";

/**
 * Adress service.
 * @module api/AdressApi
 * @version 1.2.7
 */
export class AdressApi {
  /**
    * Constructs a new AdressApi. 
    * @alias module:api/AdressApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the deleteAdress operation.
   * @callback moduleapi/AdressApi~deleteAdressCallback
   * @param {String} error Error message, if any.
   * @param {module:model/InlineResponse2002{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Supprimer une adresse
   * Supprime une adresse du carnet d&#x27;adresses. Attention, opération irrémédiable.
   * @param {String} wwServiceId Votre service Id
   * @param {String} wwAccessToken Un access token valide
   * @param {Number} idAdress ID de l&#x27;adresse à supprimer
   * @param {module:api/AdressApi~deleteAdressCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  deleteAdress(wwServiceId, wwAccessToken, idAdress, callback) {
    let postBody = null;
    // verify the required parameter 'wwServiceId' is set
    if (wwServiceId === undefined || wwServiceId === null) {
      throw new Error(
        "Missing the required parameter 'wwServiceId' when calling deleteAdress"
      );
    }
    // verify the required parameter 'wwAccessToken' is set
    if (wwAccessToken === undefined || wwAccessToken === null) {
      throw new Error(
        "Missing the required parameter 'wwAccessToken' when calling deleteAdress"
      );
    }
    // verify the required parameter 'idAdress' is set
    if (idAdress === undefined || idAdress === null) {
      throw new Error(
        "Missing the required parameter 'idAdress' when calling deleteAdress"
      );
    }

    let pathParams = {};
    let queryParams = {
      idAdress: idAdress,
    };
    let headerParams = {
      "ww-service-id": wwServiceId,
      "ww-access-token": wwAccessToken,
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = InlineResponse2002;

    return this.apiClient.callApi(
      "/deleteAdress",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getAdressInfos operation.
   * @callback moduleapi/AdressApi~getAdressInfosCallback
   * @param {String} error Error message, if any.
   * @param {module:model/InlineResponse2007{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Obtenir les infos complètes d&#x27;une ou plusieurs adresse(s) à partir de leurs adresse Id (destinataire ou expéditeur).
   * @param {String} wwServiceId Votre service Id
   * @param {String} wwAccessToken Un access token valide
   * @param {Array.<Number>} idAdress Les adresse Id des adresses dont vous souhaitez extraire les informations (maximum 50 adresses à la fois).
   * @param {module:api/AdressApi~getAdressInfosCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  getAdressInfos(wwServiceId, wwAccessToken, idAdress, callback) {
    let postBody = null;
    // verify the required parameter 'wwServiceId' is set
    if (wwServiceId === undefined || wwServiceId === null) {
      throw new Error(
        "Missing the required parameter 'wwServiceId' when calling getAdressInfos"
      );
    }
    // verify the required parameter 'wwAccessToken' is set
    if (wwAccessToken === undefined || wwAccessToken === null) {
      throw new Error(
        "Missing the required parameter 'wwAccessToken' when calling getAdressInfos"
      );
    }
    // verify the required parameter 'idAdress' is set
    if (idAdress === undefined || idAdress === null) {
      throw new Error(
        "Missing the required parameter 'idAdress' when calling getAdressInfos"
      );
    }

    let pathParams = {};
    let queryParams = {
      "idAdress[]": this.apiClient.buildCollectionParam(idAdress, "multi"),
    };
    let headerParams = {
      "ww-service-id": wwServiceId,
      "ww-access-token": wwAccessToken,
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = InlineResponse2007;

    return this.apiClient.callApi(
      "/getAdressInfos",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getCountry operation.
   * @callback moduleapi/AdressApi~getCountryCallback
   * @param {String} error Error message, if any.
   * @param {module:model/InlineResponse2004{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Obtenir la liste des pays valides
   * Vous permet d&#x27;avoir la liste des pays disponibles, avec leur orthographe normalisée.     Au sujet des zones géographiques :   fr &#x3D; France métropolitaine  om1 &#x3D; GUADELOUPE, GUYANE FRANCAISE, MARTINIQUE, MAYOTTE, REUNION, SAINT BARTHELEMY, SAINT MARTIN, ST-PIERRE-MIQUELON  om2 &#x3D; CLIPPERTON, NOUVELLE CALEDONIE, POLYNESIE FRANCAISE, TERRES AUSTRALES FR, WALLIS ET FUTUNA  z1 : UE sauf France  z2 : Reste du monde
   * @param {String} wwServiceId Votre service Id
   * @param {String} wwAccessToken Un access token valide
   * @param {Array.<module:model/String>} zone Les zones à extraire : fr,z1,z2,om1,om2
   * @param {module:api/AdressApi~getCountryCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  getCountry(wwServiceId, wwAccessToken, zone, callback) {
    let postBody = null;
    // verify the required parameter 'wwServiceId' is set
    if (wwServiceId === undefined || wwServiceId === null) {
      throw new Error(
        "Missing the required parameter 'wwServiceId' when calling getCountry"
      );
    }
    // verify the required parameter 'wwAccessToken' is set
    if (wwAccessToken === undefined || wwAccessToken === null) {
      throw new Error(
        "Missing the required parameter 'wwAccessToken' when calling getCountry"
      );
    }
    // verify the required parameter 'zone' is set
    if (zone === undefined || zone === null) {
      throw new Error(
        "Missing the required parameter 'zone' when calling getCountry"
      );
    }

    let pathParams = {};
    let queryParams = {
      "zone[]": this.apiClient.buildCollectionParam(zone, "multi"),
    };
    let headerParams = {
      "ww-service-id": wwServiceId,
      "ww-access-token": wwAccessToken,
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = InlineResponse2004;

    return this.apiClient.callApi(
      "/getCountry",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the listAdress operation.
   * @callback moduleapi/AdressApi~listAdressCallback
   * @param {String} error Error message, if any.
   * @param {module:model/InlineResponse2006{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Lister les adresses du carnet d&#x27;adresses d&#x27;un utilisateur. Limité à 500 adresses. Pour plus de précision dans la recherche utilisez le paramètre \&quot;search\&quot;.
   * @param {String} wwServiceId Votre service Id
   * @param {String} wwAccessToken Un access token valide
   * @param {Number} idUser User Id de l&#x27;utilisateur propriétaire de cette adresse.
   * @param {module:model/String} type Type d&#x27;adresse : Expéditeur (exp) ou destinataire (dest)
   * @param {Object} opts Optional parameters
   * @param {String} opts.search Recherche d&#x27;une adresse précise (de la forme {\&quot;nom\&quot;:\&quot;\&quot;,\&quot;societe\&quot;:\&quot;\&quot;,\&quot;cp\&quot;:\&quot;\&quot;,\&quot;ville\&quot;:\&quot;\&quot;}).
   * @param {module:api/AdressApi~listAdressCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  listAdress(wwServiceId, wwAccessToken, idUser, type, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'wwServiceId' is set
    if (wwServiceId === undefined || wwServiceId === null) {
      throw new Error(
        "Missing the required parameter 'wwServiceId' when calling listAdress"
      );
    }
    // verify the required parameter 'wwAccessToken' is set
    if (wwAccessToken === undefined || wwAccessToken === null) {
      throw new Error(
        "Missing the required parameter 'wwAccessToken' when calling listAdress"
      );
    }
    // verify the required parameter 'idUser' is set
    if (idUser === undefined || idUser === null) {
      throw new Error(
        "Missing the required parameter 'idUser' when calling listAdress"
      );
    }
    // verify the required parameter 'type' is set
    if (type === undefined || type === null) {
      throw new Error(
        "Missing the required parameter 'type' when calling listAdress"
      );
    }

    let pathParams = {};
    let queryParams = {
      idUser: idUser,
      type: type,
      search: opts["search"],
    };
    let headerParams = {
      "ww-service-id": wwServiceId,
      "ww-access-token": wwAccessToken,
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = InlineResponse2006;

    return this.apiClient.callApi(
      "/listAdress",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the setNewAdress operation.
   * @callback moduleapi/AdressApi~setNewAdressCallback
   * @param {String} error Error message, if any.
   * @param {module:model/InlineResponse2005{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Créer une nouvelle adresse dans le carnet d&#x27;adresses (non obligatoire pour l&#x27;envoi d&#x27;un courrier)
   * Cela peut-être une adresse d&#x27;expéditeur ou de destinataire. Les adresses sont liées à un utilisateur précis.  Vous ne pouvez pas créer plusieurs fois la même adresse, mais réutiliser les adresses créées.  Sont obligatoires : (nom et/ou société), (cp), (ville), (pays)  Pays doit être avec une orthographe conforme cf. getCountry()  Si une infos est inutilisée, tout de même l&#x27;envoyer en string vide.  Si vous ne souhaitez pas utiliser de carnet d&#x27;adresses, vous pouvez intégrer directement les adresses dans l&#x27;envoi des courriers, sans avoir recours à cette fonction avant.
   * @param {String} wwServiceId Votre service Id
   * @param {String} wwAccessToken Un access token valide
   * @param {Number} idUser User Id de l&#x27;utilisateur propriétaire de cette adresse.
   * @param {module:model/String} type Type d&#x27;adresse : Expéditeur (exp) ou destinataire (dest)
   * @param {Object} opts Optional parameters
   * @param {module:model/AdressInfosAdress} opts.adress
   * @param {module:api/AdressApi~setNewAdressCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  setNewAdress(wwServiceId, wwAccessToken, idUser, type, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'wwServiceId' is set
    if (wwServiceId === undefined || wwServiceId === null) {
      throw new Error(
        "Missing the required parameter 'wwServiceId' when calling setNewAdress"
      );
    }
    // verify the required parameter 'wwAccessToken' is set
    if (wwAccessToken === undefined || wwAccessToken === null) {
      throw new Error(
        "Missing the required parameter 'wwAccessToken' when calling setNewAdress"
      );
    }
    // verify the required parameter 'idUser' is set
    if (idUser === undefined || idUser === null) {
      throw new Error(
        "Missing the required parameter 'idUser' when calling setNewAdress"
      );
    }
    // verify the required parameter 'type' is set
    if (type === undefined || type === null) {
      throw new Error(
        "Missing the required parameter 'type' when calling setNewAdress"
      );
    }

    let pathParams = {};
    let queryParams = {
      idUser: idUser,
      type: type,
    };
    let headerParams = {
      "ww-service-id": wwServiceId,
      "ww-access-token": wwAccessToken,
    };
    let formParams = {
      adress: opts["adress"],
    };

    let authNames = [];
    let contentTypes = ["application/x-www-form-urlencoded"];
    let accepts = ["application/json"];
    let returnType = InlineResponse2005;

    return this.apiClient.callApi(
      "/setNewAdress",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the updateAdress operation.
   * @callback moduleapi/AdressApi~updateAdressCallback
   * @param {String} error Error message, if any.
   * @param {module:model/InlineResponse2002{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Modifier une adresse dans le carnet d&#x27;adresses
   * Cela peut-être une adresse d&#x27;expéditeur ou de destinataire. Sont obligatoires : (nom et/ou société), (cp), (ville), (pays) / pays doit être avec une orthographe conforme cf. getCountry() / Si une infos est inutilisée, tout de même l&#x27;envoyer en string vide.
   * @param {String} wwServiceId Votre service Id
   * @param {String} wwAccessToken Un access token valide
   * @param {Number} idAdress Id de l&#x27;adresse à modifier.
   * @param {Object} opts Optional parameters
   * @param {module:model/AdressInfosAdress} opts.adress
   * @param {module:api/AdressApi~updateAdressCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  updateAdress(wwServiceId, wwAccessToken, idAdress, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'wwServiceId' is set
    if (wwServiceId === undefined || wwServiceId === null) {
      throw new Error(
        "Missing the required parameter 'wwServiceId' when calling updateAdress"
      );
    }
    // verify the required parameter 'wwAccessToken' is set
    if (wwAccessToken === undefined || wwAccessToken === null) {
      throw new Error(
        "Missing the required parameter 'wwAccessToken' when calling updateAdress"
      );
    }
    // verify the required parameter 'idAdress' is set
    if (idAdress === undefined || idAdress === null) {
      throw new Error(
        "Missing the required parameter 'idAdress' when calling updateAdress"
      );
    }

    let pathParams = {};
    let queryParams = {
      idAdress: idAdress,
    };
    let headerParams = {
      "ww-service-id": wwServiceId,
      "ww-access-token": wwAccessToken,
    };
    let formParams = {
      adress: opts["adress"],
    };

    let authNames = [];
    let contentTypes = ["application/x-www-form-urlencoded"];
    let accepts = ["application/json"];
    let returnType = InlineResponse2002;

    return this.apiClient.callApi(
      "/updateAdress",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
}

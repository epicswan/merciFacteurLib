/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AdressSendCourrier} from '../model/AdressSendCourrier';
import {InlineResponse20010} from '../model/InlineResponse20010';
import {InlineResponse20011} from '../model/InlineResponse20011';
import {InlineResponse20012} from '../model/InlineResponse20012';
import {InlineResponse20016} from '../model/InlineResponse20016';
import {InlineResponse20017} from '../model/InlineResponse20017';
import {InlineResponse2002} from '../model/InlineResponse2002';
import {InlineResponse2008} from '../model/InlineResponse2008';
import {InlineResponse2009} from '../model/InlineResponse2009';
import {InlineResponse400} from '../model/InlineResponse400';
import {SendCourrierAnonymize} from '../model/SendCourrierAnonymize';
import {SendCourrierContent} from '../model/SendCourrierContent';

/**
* Courrier service.
* @module api/CourrierApi
* @version 1.2.7
*/
export class CourrierApi {

    /**
    * Constructs a new CourrierApi. 
    * @alias module:api/CourrierApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteEnvoi operation.
     * @callback moduleapi/CourrierApi~deleteEnvoiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Annuler un envoi et son contenu
     * Attention, opération irrémédiable. Selon le statut actuel des courriers, une demande d&#x27;annulation d&#x27;envoi pourra être rejetée immédiatement, rejetée après un certain délai, rejetée partiellement (annulation de l&#x27;envoi mais facturation partiellement annulée), ou acceptée intégralement (annulation de l&#x27;envoi et annulation intégrale de la facturation de cet envoi).
     * @param {String} wwServiceId Votre service Id
     * @param {String} wwAccessToken Un access token valide
     * @param {Number} idEnvoi Id de l&#x27;envoi contenant les courriers à annuler (Id retourné par /sendCourrier)
     * @param {module:api/CourrierApi~deleteEnvoiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteEnvoi(wwServiceId, wwAccessToken, idEnvoi, callback) {
      
      let postBody = null;
      // verify the required parameter 'wwServiceId' is set
      if (wwServiceId === undefined || wwServiceId === null) {
        throw new Error("Missing the required parameter 'wwServiceId' when calling deleteEnvoi");
      }
      // verify the required parameter 'wwAccessToken' is set
      if (wwAccessToken === undefined || wwAccessToken === null) {
        throw new Error("Missing the required parameter 'wwAccessToken' when calling deleteEnvoi");
      }
      // verify the required parameter 'idEnvoi' is set
      if (idEnvoi === undefined || idEnvoi === null) {
        throw new Error("Missing the required parameter 'idEnvoi' when calling deleteEnvoi");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'idEnvoi': idEnvoi
      };
      let headerParams = {
        'ww-service-id': wwServiceId,'ww-access-token': wwAccessToken
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/deleteEnvoi', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getEnvoi operation.
     * @callback moduleapi/CourrierApi~getEnvoiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lister les courriers d&#x27;un envoi en particulier
     * Cette opération entre dans le détail des informations d&#x27;un envoi précis. Un envoi peut etre composé de plusieurs destinataires (une lettre identique envoyée a des destinataires différents). Un envoi peut donc contenir plusieurs courriers.
     * @param {String} wwServiceId Votre service Id
     * @param {String} wwAccessToken Un access token valide
     * @param {Number} idEnvoi Id de l&#x27;envoi dont on veut extraire les détails.
     * @param {module:api/CourrierApi~getEnvoiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getEnvoi(wwServiceId, wwAccessToken, idEnvoi, callback) {
      
      let postBody = null;
      // verify the required parameter 'wwServiceId' is set
      if (wwServiceId === undefined || wwServiceId === null) {
        throw new Error("Missing the required parameter 'wwServiceId' when calling getEnvoi");
      }
      // verify the required parameter 'wwAccessToken' is set
      if (wwAccessToken === undefined || wwAccessToken === null) {
        throw new Error("Missing the required parameter 'wwAccessToken' when calling getEnvoi");
      }
      // verify the required parameter 'idEnvoi' is set
      if (idEnvoi === undefined || idEnvoi === null) {
        throw new Error("Missing the required parameter 'idEnvoi' when calling getEnvoi");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'idEnvoi': idEnvoi
      };
      let headerParams = {
        'ww-service-id': wwServiceId,'ww-access-token': wwAccessToken
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/getEnvoi', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPostagePrice operation.
     * @callback moduleapi/CourrierApi~getPostagePriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtenir le montant d&#x27;un ou plusieurs courriers (non nécessaire à l&#x27;envoi)
     * Vous permet d&#x27;avoir le montant de l&#x27;affranchissement et du contenu d&#x27;un courrier en fonction de son contenu, de son mode d&#x27;envoi et de sa destination. Vous n&#x27;avez pas besoin d&#x27;utiliser cette fonction pour envoyer un courrier, mais vous pouvez l&#x27;utiliser si vous avez besoin de cette information avant d&#x27;envoyer un courrier (par exemple pour des raisons de facturation). Le montant retourné est un montant HT. La partie \&quot;affranchissement\&quot; n&#x27;est pas soumise à la TVA.
     * @param {String} wwServiceId Votre service Id
     * @param {String} wwAccessToken Un access token valide
     * @param {Array.<module:model/String>} modeEnvoi Mode d&#x27;envoi du courrier : normal, suivi, lrar ou lrare
     * @param {Array.<module:model/String>} cardFormat Format de la carte (laisser vide si pas de carte)
     * @param {Array.<module:model/String>} cardPapier Papier de la carte (laisser vide si pas de carte)
     * @param {Array.<module:model/String>} cardCoin Coins de la carte (laisser vide si pas de carte)
     * @param {Number} letterPageNumber Nombre de page(s) de lettre (indiquer 0 si pas de lettre)
     * @param {Number} photoNumber Nombre de photo(s) (indiquer 0 si pas de lettre)
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.paysDestinataire Tableau de pays de destination, avec une orthographe conforme via /getCountry  (indiquez soit paysDestinataire, soit idDestinataire).
     * @param {Array.<Number>} opts.idDestinataire Tableau d&#x27;id de destinataire(s) déjà créé (indiquez soit paysDestinataire, soit idDestinataire).
     * @param {module:model/String} opts.letterPrintSides rectoverso pour une lettre imprimée recto-verso, recto pour une lettre imprimée en recto simple. (default to <.>)
     * @param {module:api/CourrierApi~getPostagePriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPostagePrice(wwServiceId, wwAccessToken, modeEnvoi, cardFormat, cardPapier, cardCoin, letterPageNumber, photoNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'wwServiceId' is set
      if (wwServiceId === undefined || wwServiceId === null) {
        throw new Error("Missing the required parameter 'wwServiceId' when calling getPostagePrice");
      }
      // verify the required parameter 'wwAccessToken' is set
      if (wwAccessToken === undefined || wwAccessToken === null) {
        throw new Error("Missing the required parameter 'wwAccessToken' when calling getPostagePrice");
      }
      // verify the required parameter 'modeEnvoi' is set
      if (modeEnvoi === undefined || modeEnvoi === null) {
        throw new Error("Missing the required parameter 'modeEnvoi' when calling getPostagePrice");
      }
      // verify the required parameter 'cardFormat' is set
      if (cardFormat === undefined || cardFormat === null) {
        throw new Error("Missing the required parameter 'cardFormat' when calling getPostagePrice");
      }
      // verify the required parameter 'cardPapier' is set
      if (cardPapier === undefined || cardPapier === null) {
        throw new Error("Missing the required parameter 'cardPapier' when calling getPostagePrice");
      }
      // verify the required parameter 'cardCoin' is set
      if (cardCoin === undefined || cardCoin === null) {
        throw new Error("Missing the required parameter 'cardCoin' when calling getPostagePrice");
      }
      // verify the required parameter 'letterPageNumber' is set
      if (letterPageNumber === undefined || letterPageNumber === null) {
        throw new Error("Missing the required parameter 'letterPageNumber' when calling getPostagePrice");
      }
      // verify the required parameter 'photoNumber' is set
      if (photoNumber === undefined || photoNumber === null) {
        throw new Error("Missing the required parameter 'photoNumber' when calling getPostagePrice");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'modeEnvoi': this.apiClient.buildCollectionParam(modeEnvoi, 'multi'),'paysDestinataire[]': this.apiClient.buildCollectionParam(opts['paysDestinataire'], 'multi'),'idDestinataire[]': this.apiClient.buildCollectionParam(opts['idDestinataire'], 'multi'),'cardFormat': this.apiClient.buildCollectionParam(cardFormat, 'multi'),'cardPapier': this.apiClient.buildCollectionParam(cardPapier, 'multi'),'cardCoin': this.apiClient.buildCollectionParam(cardCoin, 'multi'),'letterPageNumber': letterPageNumber,'letterPrintSides': opts['letterPrintSides'],'photoNumber': photoNumber
      };
      let headerParams = {
        'ww-service-id': wwServiceId,'ww-access-token': wwAccessToken
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/getPostagePrice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProof operation.
     * @callback moduleapi/CourrierApi~getProofCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20017{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtenir les documents preuves d&#x27;un courrier (preuve de dépôt, preuve de réception, preuve de télechargement, etc.)
     * Cela vous permet de récepérer les fichiers de preuves de vos courriers. Uniquement possible pour les courriers envoyés en Suivi, Recommandés avec avis de réception, ou Recommandé électroniques. Vous pourrez récupérer les preuves de dépôt (pour les suivi, les recommandés et les recommandés électroniques), les avis de réception (pour les recommandés avec avis de réception numérisé et les recommandés électropniques), ainsi que les preuves de télechargements (pour les recommandés électroniques). Les documents récupérés sont au format PDF ou JPEG.
     * @param {String} wwServiceId Votre service Id
     * @param {String} wwAccessToken Un access token valide
     * @param {String} trackingNumber Numéro de suivi du courrier.
     * @param {module:model/String} document Le document de preuve souhaité : depot (preuve de dépôt), reception (avis de réception), ou telechargement (preuve de téléchargement).
     * @param {module:api/CourrierApi~getProofCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProof(wwServiceId, wwAccessToken, trackingNumber, document, callback) {
      
      let postBody = null;
      // verify the required parameter 'wwServiceId' is set
      if (wwServiceId === undefined || wwServiceId === null) {
        throw new Error("Missing the required parameter 'wwServiceId' when calling getProof");
      }
      // verify the required parameter 'wwAccessToken' is set
      if (wwAccessToken === undefined || wwAccessToken === null) {
        throw new Error("Missing the required parameter 'wwAccessToken' when calling getProof");
      }
      // verify the required parameter 'trackingNumber' is set
      if (trackingNumber === undefined || trackingNumber === null) {
        throw new Error("Missing the required parameter 'trackingNumber' when calling getProof");
      }
      // verify the required parameter 'document' is set
      if (document === undefined || document === null) {
        throw new Error("Missing the required parameter 'document' when calling getProof");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'trackingNumber': trackingNumber,'document': document
      };
      let headerParams = {
        'ww-service-id': wwServiceId,'ww-access-token': wwAccessToken
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/getProof', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSuiviEnvoi operation.
     * @callback moduleapi/CourrierApi~getSuiviEnvoiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20016{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtenir le suivi et l&#x27;état des courriers d&#x27;un envoi
     * Cette opération vous permet d&#x27;obtenir à n&#x27;importe quel moment l&#x27;état de courriers qui composent un envoi. Cet état correspond à l&#x27;état de l&#x27;impression du courrier jusqu&#x27;à sa remise à La Poste, et dans le cas des envois en LRAR ou en SUIVI, également l&#x27;historique du suivi de l&#x27;acheminement des courriers de la prise en charge par La Poste jusqu&#x27;à la distribution au destinataire.
     * @param {String} wwServiceId Votre service Id
     * @param {String} wwAccessToken Un access token valide
     * @param {Number} idEnvoi Id de l&#x27;envoi dont on veut extraire le suivi.
     * @param {module:api/CourrierApi~getSuiviEnvoiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSuiviEnvoi(wwServiceId, wwAccessToken, idEnvoi, callback) {
      
      let postBody = null;
      // verify the required parameter 'wwServiceId' is set
      if (wwServiceId === undefined || wwServiceId === null) {
        throw new Error("Missing the required parameter 'wwServiceId' when calling getSuiviEnvoi");
      }
      // verify the required parameter 'wwAccessToken' is set
      if (wwAccessToken === undefined || wwAccessToken === null) {
        throw new Error("Missing the required parameter 'wwAccessToken' when calling getSuiviEnvoi");
      }
      // verify the required parameter 'idEnvoi' is set
      if (idEnvoi === undefined || idEnvoi === null) {
        throw new Error("Missing the required parameter 'idEnvoi' when calling getSuiviEnvoi");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'idEnvoi': idEnvoi
      };
      let headerParams = {
        'ww-service-id': wwServiceId,'ww-access-token': wwAccessToken
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20016;

      return this.apiClient.callApi(
        '/getSuiviEnvoi', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listEnvois operation.
     * @callback moduleapi/CourrierApi~listEnvoisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lister les 50 derniers envois d&#x27;un utilisateur
     * Cette opération liste les envois, sans entrer dans le détail de chaque envoi.Un envoi peut etre composé de plusieurs destinataires (une lettre identique envoyée a des destinataires différents). Un envoi peut donc contenir plusieurs courriers.
     * @param {String} wwServiceId Votre service Id
     * @param {String} wwAccessToken Un access token valide
     * @param {Number} idUser User Id de l&#x27;utilisateur dont on veut lister les envois.
     * @param {module:api/CourrierApi~listEnvoisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listEnvois(wwServiceId, wwAccessToken, idUser, callback) {
      
      let postBody = null;
      // verify the required parameter 'wwServiceId' is set
      if (wwServiceId === undefined || wwServiceId === null) {
        throw new Error("Missing the required parameter 'wwServiceId' when calling listEnvois");
      }
      // verify the required parameter 'wwAccessToken' is set
      if (wwAccessToken === undefined || wwAccessToken === null) {
        throw new Error("Missing the required parameter 'wwAccessToken' when calling listEnvois");
      }
      // verify the required parameter 'idUser' is set
      if (idUser === undefined || idUser === null) {
        throw new Error("Missing the required parameter 'idUser' when calling listEnvois");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'idUser': idUser
      };
      let headerParams = {
        'ww-service-id': wwServiceId,'ww-access-token': wwAccessToken
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/listEnvois', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sendCourrier operation.
     * @callback moduleapi/CourrierApi~sendCourrierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Valider l&#x27;envoi d&#x27;un courrier
     * ATTENTION, cette opération génère un courrier qui sera débité de votre compte, imprimé et posté. Pour effectuer vos tests d&#x27;intégration, n&#x27;hésitez pas à contacter notre service client pour ouvrir un compte \&quot;Sandbox\&quot;.
     * @param {Number} idUser 
     * @param {module:model/String} modeEnvoi 
     * @param {module:model/AdressSendCourrier} adress 
     * @param {String} dateEnvoi 
     * @param {String} designation 
     * @param {module:model/SendCourrierAnonymize} anonymize 
     * @param {module:model/SendCourrierContent} content 
     * @param {String} wwServiceId Votre service Id
     * @param {String} wwAccessToken Un access token valide
     * @param {module:api/CourrierApi~sendCourrierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    sendCourrier(idUser, modeEnvoi, adress, dateEnvoi, designation, anonymize, content, wwServiceId, wwAccessToken, callback) {
      
      let postBody = null;
      // verify the required parameter 'idUser' is set
      if (idUser === undefined || idUser === null) {
        throw new Error("Missing the required parameter 'idUser' when calling sendCourrier");
      }
      // verify the required parameter 'modeEnvoi' is set
      if (modeEnvoi === undefined || modeEnvoi === null) {
        throw new Error("Missing the required parameter 'modeEnvoi' when calling sendCourrier");
      }
      // verify the required parameter 'adress' is set
      if (adress === undefined || adress === null) {
        throw new Error("Missing the required parameter 'adress' when calling sendCourrier");
      }
      // verify the required parameter 'dateEnvoi' is set
      if (dateEnvoi === undefined || dateEnvoi === null) {
        throw new Error("Missing the required parameter 'dateEnvoi' when calling sendCourrier");
      }
      // verify the required parameter 'designation' is set
      if (designation === undefined || designation === null) {
        throw new Error("Missing the required parameter 'designation' when calling sendCourrier");
      }
      // verify the required parameter 'anonymize' is set
      if (anonymize === undefined || anonymize === null) {
        throw new Error("Missing the required parameter 'anonymize' when calling sendCourrier");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling sendCourrier");
      }
      // verify the required parameter 'wwServiceId' is set
      if (wwServiceId === undefined || wwServiceId === null) {
        throw new Error("Missing the required parameter 'wwServiceId' when calling sendCourrier");
      }
      // verify the required parameter 'wwAccessToken' is set
      if (wwAccessToken === undefined || wwAccessToken === null) {
        throw new Error("Missing the required parameter 'wwAccessToken' when calling sendCourrier");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ww-service-id': wwServiceId,'ww-access-token': wwAccessToken
      };
      let formParams = {
        'idUser': idUser,'modeEnvoi': modeEnvoi,'adress': adress,'dateEnvoi': dateEnvoi,'designation': designation,'anonymize': anonymize,'content': content
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2009;

      return this.apiClient.callApi(
        '/sendCourrier', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the uploadFile operation.
     * @callback moduleapi/CourrierApi~uploadFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Charger des fichiers dans un token pour les envoyer dans un courrier (facultatif) - uniquement disponible pour l&#x27;envoi de photos actuellement
     * Vous pouvez charger des fichiers (photos) dans un Token avec /uploadFile. Utile si vous envoyez plusieurs fois le même contenu, ou si vous envoyez beaucoup de fichiers (surtout en base64). A la première utilisation, un token est créé et vous est retourné. Le Token peut être ensuite utilisé pour plusieurs envois.
     * @param {Number} idUser 
     * @param {String} token 
     * @param {module:model/String} product 
     * @param {module:model/String} type 
     * @param {String} file 
     * @param {String} wwServiceId Votre service Id
     * @param {String} wwAccessToken Un access token valide
     * @param {module:api/CourrierApi~uploadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    uploadFile(idUser, token, product, type, file, wwServiceId, wwAccessToken, callback) {
      
      let postBody = null;
      // verify the required parameter 'idUser' is set
      if (idUser === undefined || idUser === null) {
        throw new Error("Missing the required parameter 'idUser' when calling uploadFile");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling uploadFile");
      }
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling uploadFile");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling uploadFile");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadFile");
      }
      // verify the required parameter 'wwServiceId' is set
      if (wwServiceId === undefined || wwServiceId === null) {
        throw new Error("Missing the required parameter 'wwServiceId' when calling uploadFile");
      }
      // verify the required parameter 'wwAccessToken' is set
      if (wwAccessToken === undefined || wwAccessToken === null) {
        throw new Error("Missing the required parameter 'wwAccessToken' when calling uploadFile");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ww-service-id': wwServiceId,'ww-access-token': wwAccessToken
      };
      let formParams = {
        'idUser': idUser,'token': token,'product': product,'type': type,'file': file
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/uploadFile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
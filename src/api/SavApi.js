/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import { ApiClient } from "../ApiClient";
import { InlineResponse20015 } from "../model/InlineResponse20015";
import { InlineResponse400 } from "../model/InlineResponse400";

/**
 * Sav service.
 * @module api/SavApi
 * @version 1.2.7
 */

export class SavApi {
  /**
   * Callback function to receive the result of the openSavTicket operation.
   * @callback moduleapi/SavApi~openSavTicketCallback
   * @param {String} error Error message, if any.
   * @param {module:model/InlineResponse20015} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Ouvrir un ticket SAV auprès de Merci facteur
   * Si vous avez besoin de déléguer du SAV lié aux envois de courriers, vous pouvez le faire dans une certaine mesure en ouvrant des tickets SAV.
   * @param {String} wwServiceId Votre service Id
   * @param {String} wwAccessToken Un access token valide
   * @param {Object} opts Optional parameters
   * @param {String} opts.yourServiceName
   * @param {String} opts.email
   * @param {String} opts.referenceCourrier
   * @param {String} opts.sujet
   * @param {String} opts.messageTexte
   * @param {module:api/SavApi~openSavTicketCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  openSavTicket(wwServiceId, wwAccessToken, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'wwServiceId' is set
    if (wwServiceId === undefined || wwServiceId === null) {
      throw new Error(
        "Missing the required parameter 'wwServiceId' when calling openSavTicket"
      );
    }
    // verify the required parameter 'wwAccessToken' is set
    if (wwAccessToken === undefined || wwAccessToken === null) {
      throw new Error(
        "Missing the required parameter 'wwAccessToken' when calling openSavTicket"
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      "ww-service-id": wwServiceId,
      "ww-access-token": wwAccessToken,
    };
    let formParams = {
      yourServiceName: opts["yourServiceName"],
      email: opts["email"],
      referenceCourrier: opts["referenceCourrier"],
      sujet: opts["sujet"],
      messageTexte: opts["messageTexte"],
    };

    let authNames = [];
    let contentTypes = ["application/x-www-form-urlencoded"];
    let accepts = ["application/json"];
    let returnType = InlineResponse20015;

    return this.apiClient.callApi(
      "/openSavTicket",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
}

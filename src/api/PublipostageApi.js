/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse20013} from '../model/InlineResponse20013';
import {InlineResponse20014} from '../model/InlineResponse20014';
import {InlineResponse2009} from '../model/InlineResponse2009';
import {InlineResponse400} from '../model/InlineResponse400';
import {SendCourrierAnonymize} from '../model/SendCourrierAnonymize';
import {SourcePublipostageSource} from '../model/SourcePublipostageSource';

/**
* Publipostage service.
* @module api/PublipostageApi
* @version 1.2.7
*/
export class PublipostageApi {

    /**
    * Constructs a new PublipostageApi. 
    * @alias module:api/PublipostageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the sendPublipostage operation.
     * @callback moduleapi/PublipostageApi~sendPublipostageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Envoi de la source de données du publipostage
     * Validation de l&#x27;envoi d&#x27;un publipostage. Cela enclenche la fusion des données, la mise en production, l&#x27;impression et l&#x27;envoi de l&#x27;ensemble des lettres du publipostage.
     * @param {Number} idEnvoi 
     * @param {Number} idExp 
     * @param {String} jsonExp 
     * @param {module:model/String} modeEnvoi 
     * @param {module:model/SendCourrierAnonymize} anonymize 
     * @param {String} wwServiceId Votre service Id
     * @param {String} wwAccessToken Un access token valide
     * @param {module:api/PublipostageApi~sendPublipostageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    sendPublipostage(idEnvoi, idExp, jsonExp, modeEnvoi, anonymize, wwServiceId, wwAccessToken, callback) {
      
      let postBody = null;
      // verify the required parameter 'idEnvoi' is set
      if (idEnvoi === undefined || idEnvoi === null) {
        throw new Error("Missing the required parameter 'idEnvoi' when calling sendPublipostage");
      }
      // verify the required parameter 'idExp' is set
      if (idExp === undefined || idExp === null) {
        throw new Error("Missing the required parameter 'idExp' when calling sendPublipostage");
      }
      // verify the required parameter 'jsonExp' is set
      if (jsonExp === undefined || jsonExp === null) {
        throw new Error("Missing the required parameter 'jsonExp' when calling sendPublipostage");
      }
      // verify the required parameter 'modeEnvoi' is set
      if (modeEnvoi === undefined || modeEnvoi === null) {
        throw new Error("Missing the required parameter 'modeEnvoi' when calling sendPublipostage");
      }
      // verify the required parameter 'anonymize' is set
      if (anonymize === undefined || anonymize === null) {
        throw new Error("Missing the required parameter 'anonymize' when calling sendPublipostage");
      }
      // verify the required parameter 'wwServiceId' is set
      if (wwServiceId === undefined || wwServiceId === null) {
        throw new Error("Missing the required parameter 'wwServiceId' when calling sendPublipostage");
      }
      // verify the required parameter 'wwAccessToken' is set
      if (wwAccessToken === undefined || wwAccessToken === null) {
        throw new Error("Missing the required parameter 'wwAccessToken' when calling sendPublipostage");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ww-service-id': wwServiceId,'ww-access-token': wwAccessToken
      };
      let formParams = {
        'idEnvoi': idEnvoi,'idExp': idExp,'jsonExp': jsonExp,'modeEnvoi': modeEnvoi,'anonymize': anonymize
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2009;

      return this.apiClient.callApi(
        '/sendPublipostage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sourcePublipostage operation.
     * @callback moduleapi/PublipostageApi~sourcePublipostageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20014{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Envoi de la source de données du publipostage
     * La source de donnée contient les informations de vos destinataires. Elle peut être au format CSV/TXT (; entre les champs, et saut de ligne entre les lignes, la première ligne doit contenir les champs de fusion), ou au format json (de la forme [{\&quot;prenom\&quot;:\&quot;Jean-Marc\&quot;, \&quot;ville\&quot;:\&quot;Paris\&quot;, \&quot;champ_de_fusion\&quot;:\&quot;valeur\&quot;},{\&quot;prenom\&quot;:\&quot;Julie\&quot;, \&quot;ville\&quot;:\&quot;Lyon\&quot;, \&quot;champ_de_fusion\&quot;:\&quot;valeur\&quot;}]). Votre fichier source doit au minimum contenir les champs de fusion suivants : \&quot;nom\&quot; ou \&quot;societe\&quot;, \&quot;cp\&quot;, \&quot;ville\&quot;, \&quot;pays\&quot;. Dans le cas d&#x27;un fichier CSV ou TXT, la premi&amp;egrave;re ligne doit &amp;ecirc;tre : civilite;nom;prenom;societe;adresse1;adresse2;adresse3;cp;ville;pays
     * @param {Number} idUser 
     * @param {Object} templateValidation 
     * @param {module:model/SourcePublipostageSource} source 
     * @param {String} wwServiceId Votre service Id
     * @param {String} wwAccessToken Un access token valide
     * @param {module:api/PublipostageApi~sourcePublipostageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    sourcePublipostage(idUser, templateValidation, source, wwServiceId, wwAccessToken, callback) {
      
      let postBody = null;
      // verify the required parameter 'idUser' is set
      if (idUser === undefined || idUser === null) {
        throw new Error("Missing the required parameter 'idUser' when calling sourcePublipostage");
      }
      // verify the required parameter 'templateValidation' is set
      if (templateValidation === undefined || templateValidation === null) {
        throw new Error("Missing the required parameter 'templateValidation' when calling sourcePublipostage");
      }
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling sourcePublipostage");
      }
      // verify the required parameter 'wwServiceId' is set
      if (wwServiceId === undefined || wwServiceId === null) {
        throw new Error("Missing the required parameter 'wwServiceId' when calling sourcePublipostage");
      }
      // verify the required parameter 'wwAccessToken' is set
      if (wwAccessToken === undefined || wwAccessToken === null) {
        throw new Error("Missing the required parameter 'wwAccessToken' when calling sourcePublipostage");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ww-service-id': wwServiceId,'ww-access-token': wwAccessToken
      };
      let formParams = {
        'idUser': idUser,'templateValidation': templateValidation,'source': source
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/sourcePublipostage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the templatePublipostage operation.
     * @callback moduleapi/PublipostageApi~templatePublipostageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Envoi du template de la lettre à envoyer en nombre
     * Le template doit être un fichier au format DOCX, il peut contenir des zones de remplacement (ou champs de fusion) qui seront remplacés par des données contenues dans la source de données. Les champs de fusion dans le template doivent être de la forme ${prenom} (avec uniquement des lettres, chiffres et le caractère _).
     * @param {module:model/String} typeTemplate 
     * @param {String} template 
     * @param {String} wwServiceId Votre service Id
     * @param {String} wwAccessToken Un access token valide
     * @param {module:api/PublipostageApi~templatePublipostageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    templatePublipostage(typeTemplate, template, wwServiceId, wwAccessToken, callback) {
      
      let postBody = null;
      // verify the required parameter 'typeTemplate' is set
      if (typeTemplate === undefined || typeTemplate === null) {
        throw new Error("Missing the required parameter 'typeTemplate' when calling templatePublipostage");
      }
      // verify the required parameter 'template' is set
      if (template === undefined || template === null) {
        throw new Error("Missing the required parameter 'template' when calling templatePublipostage");
      }
      // verify the required parameter 'wwServiceId' is set
      if (wwServiceId === undefined || wwServiceId === null) {
        throw new Error("Missing the required parameter 'wwServiceId' when calling templatePublipostage");
      }
      // verify the required parameter 'wwAccessToken' is set
      if (wwAccessToken === undefined || wwAccessToken === null) {
        throw new Error("Missing the required parameter 'wwAccessToken' when calling templatePublipostage");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ww-service-id': wwServiceId,'ww-access-token': wwAccessToken
      };
      let formParams = {
        'typeTemplate': typeTemplate,'template': template
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/templatePublipostage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
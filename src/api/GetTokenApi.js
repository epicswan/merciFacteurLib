/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse200} from '../model/InlineResponse200';
import {InlineResponse400} from '../model/InlineResponse400';

/**
* GetToken service.
* @module api/GetTokenApi
* @version 1.2.7
*/
export class GetTokenApi {

    /**
    * Constructs a new GetTokenApi. 
    * @alias module:api/GetTokenApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getToken operation.
     * @callback moduleapi/GetTokenApi~getTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtenir un access token
     * IMPORTANT :   - Ne demander un access token qu&#x27;une seule fois par tranche de 24h. Après execution de getToken, stockez en local l&#x27;access token obtenu et refaites une demande lorsqu&#x27;il est expiré.  - Ne jamais faire transiter votre Secret Key non hashée.  [&#x60;En savoir plus sur le hashage de la private key&#x60;](https://github.com/MerciFacteur/Merci-facteur-API/tree/master/hash-secret-key)
     * @param {String} wwServiceSignature Votre clé secrète hashée (ne jamais transmettre non hashé).
     * @param {String} wwTimestamp Le timestamp identique à celui utilisé pour hasher la clé secrète.
     * @param {String} wwServiceId Votre service Id
     * @param {String} wwAuthorizedIp La ou les adresses IP des serveurs autorisés, séparées par des points-virgules. (si la restriction d&#x27;ip a été levée pour votre compte, passez une IP random, comme par exemple 111.111.111).
     * @param {module:api/GetTokenApi~getTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getToken(wwServiceSignature, wwTimestamp, wwServiceId, wwAuthorizedIp, callback) {
      
      let postBody = null;
      // verify the required parameter 'wwServiceSignature' is set
      if (wwServiceSignature === undefined || wwServiceSignature === null) {
        throw new Error("Missing the required parameter 'wwServiceSignature' when calling getToken");
      }
      // verify the required parameter 'wwTimestamp' is set
      if (wwTimestamp === undefined || wwTimestamp === null) {
        throw new Error("Missing the required parameter 'wwTimestamp' when calling getToken");
      }
      // verify the required parameter 'wwServiceId' is set
      if (wwServiceId === undefined || wwServiceId === null) {
        throw new Error("Missing the required parameter 'wwServiceId' when calling getToken");
      }
      // verify the required parameter 'wwAuthorizedIp' is set
      if (wwAuthorizedIp === undefined || wwAuthorizedIp === null) {
        throw new Error("Missing the required parameter 'wwAuthorizedIp' when calling getToken");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ww-service-signature': wwServiceSignature,'ww-timestamp': wwTimestamp,'ww-service-id': wwServiceId,'ww-authorized-ip': wwAuthorizedIp
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/getToken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}